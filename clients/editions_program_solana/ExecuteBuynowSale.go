// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ExecuteBuynowSale is the `executeBuynowSale` instruction.
type ExecuteBuynowSale struct {
	Data *ExecuteBuyNowSaleIxData

	// [0] = [WRITE, SIGNER] buyer
	//
	// [1] = [WRITE] seller
	//
	// [2] = [WRITE] saleStateAccount
	//
	// [3] = [] mintKey
	//
	// [4] = [WRITE] buyerTokenAccount
	//
	// [5] = [WRITE] exchgDepositAuthority
	//
	// [6] = [] mintMetadataAccount
	//
	// [7] = [WRITE] exchgDepositAccount
	//
	// [8] = [WRITE] cardinalManager
	//
	// [9] = [WRITE] cardinalMintCounter
	//
	// [10] = [WRITE] exchangeFeeRecipient
	//
	// [11] = [] instructions
	//
	// [12] = [] tokenProgram
	//
	// [13] = [] associatedTokenProgram
	//
	// [14] = [] cardinalTokenManagerProgram
	//
	// [15] = [] systemProgram
	//
	// [16] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExecuteBuynowSaleInstructionBuilder creates a new `ExecuteBuynowSale` instruction builder.
func NewExecuteBuynowSaleInstructionBuilder() *ExecuteBuynowSale {
	nd := &ExecuteBuynowSale{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *ExecuteBuynowSale) SetData(data ExecuteBuyNowSaleIxData) *ExecuteBuynowSale {
	inst.Data = &data
	return inst
}

// SetBuyerAccount sets the "buyer" account.
func (inst *ExecuteBuynowSale) SetBuyerAccount(buyer ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(buyer).WRITE().SIGNER()
	return inst
}

// GetBuyerAccount gets the "buyer" account.
func (inst *ExecuteBuynowSale) GetBuyerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSellerAccount sets the "seller" account.
func (inst *ExecuteBuynowSale) SetSellerAccount(seller ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(seller).WRITE()
	return inst
}

// GetSellerAccount gets the "seller" account.
func (inst *ExecuteBuynowSale) GetSellerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSaleStateAccountAccount sets the "saleStateAccount" account.
func (inst *ExecuteBuynowSale) SetSaleStateAccountAccount(saleStateAccount ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(saleStateAccount).WRITE()
	return inst
}

// GetSaleStateAccountAccount gets the "saleStateAccount" account.
func (inst *ExecuteBuynowSale) GetSaleStateAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintKeyAccount sets the "mintKey" account.
func (inst *ExecuteBuynowSale) SetMintKeyAccount(mintKey ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mintKey)
	return inst
}

// GetMintKeyAccount gets the "mintKey" account.
func (inst *ExecuteBuynowSale) GetMintKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBuyerTokenAccountAccount sets the "buyerTokenAccount" account.
func (inst *ExecuteBuynowSale) SetBuyerTokenAccountAccount(buyerTokenAccount ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(buyerTokenAccount).WRITE()
	return inst
}

// GetBuyerTokenAccountAccount gets the "buyerTokenAccount" account.
func (inst *ExecuteBuynowSale) GetBuyerTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetExchgDepositAuthorityAccount sets the "exchgDepositAuthority" account.
func (inst *ExecuteBuynowSale) SetExchgDepositAuthorityAccount(exchgDepositAuthority ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(exchgDepositAuthority).WRITE()
	return inst
}

// GetExchgDepositAuthorityAccount gets the "exchgDepositAuthority" account.
func (inst *ExecuteBuynowSale) GetExchgDepositAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMintMetadataAccountAccount sets the "mintMetadataAccount" account.
func (inst *ExecuteBuynowSale) SetMintMetadataAccountAccount(mintMetadataAccount ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(mintMetadataAccount)
	return inst
}

// GetMintMetadataAccountAccount gets the "mintMetadataAccount" account.
func (inst *ExecuteBuynowSale) GetMintMetadataAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetExchgDepositAccountAccount sets the "exchgDepositAccount" account.
func (inst *ExecuteBuynowSale) SetExchgDepositAccountAccount(exchgDepositAccount ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(exchgDepositAccount).WRITE()
	return inst
}

// GetExchgDepositAccountAccount gets the "exchgDepositAccount" account.
func (inst *ExecuteBuynowSale) GetExchgDepositAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCardinalManagerAccount sets the "cardinalManager" account.
func (inst *ExecuteBuynowSale) SetCardinalManagerAccount(cardinalManager ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(cardinalManager).WRITE()
	return inst
}

// GetCardinalManagerAccount gets the "cardinalManager" account.
func (inst *ExecuteBuynowSale) GetCardinalManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetCardinalMintCounterAccount sets the "cardinalMintCounter" account.
func (inst *ExecuteBuynowSale) SetCardinalMintCounterAccount(cardinalMintCounter ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(cardinalMintCounter).WRITE()
	return inst
}

// GetCardinalMintCounterAccount gets the "cardinalMintCounter" account.
func (inst *ExecuteBuynowSale) GetCardinalMintCounterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetExchangeFeeRecipientAccount sets the "exchangeFeeRecipient" account.
func (inst *ExecuteBuynowSale) SetExchangeFeeRecipientAccount(exchangeFeeRecipient ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(exchangeFeeRecipient).WRITE()
	return inst
}

// GetExchangeFeeRecipientAccount gets the "exchangeFeeRecipient" account.
func (inst *ExecuteBuynowSale) GetExchangeFeeRecipientAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetInstructionsAccount sets the "instructions" account.
func (inst *ExecuteBuynowSale) SetInstructionsAccount(instructions ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(instructions)
	return inst
}

// GetInstructionsAccount gets the "instructions" account.
func (inst *ExecuteBuynowSale) GetInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ExecuteBuynowSale) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ExecuteBuynowSale) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *ExecuteBuynowSale) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *ExecuteBuynowSale) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetCardinalTokenManagerProgramAccount sets the "cardinalTokenManagerProgram" account.
func (inst *ExecuteBuynowSale) SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(cardinalTokenManagerProgram)
	return inst
}

// GetCardinalTokenManagerProgramAccount gets the "cardinalTokenManagerProgram" account.
func (inst *ExecuteBuynowSale) GetCardinalTokenManagerProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ExecuteBuynowSale) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ExecuteBuynowSale) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetRentAccount sets the "rent" account.
func (inst *ExecuteBuynowSale) SetRentAccount(rent ag_solanago.PublicKey) *ExecuteBuynowSale {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *ExecuteBuynowSale) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst ExecuteBuynowSale) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ExecuteBuynowSale,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ExecuteBuynowSale) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ExecuteBuynowSale) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Buyer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Seller is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SaleStateAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MintKey is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BuyerTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ExchgDepositAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MintMetadataAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ExchgDepositAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CardinalManager is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CardinalMintCounter is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.ExchangeFeeRecipient is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Instructions is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.CardinalTokenManagerProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *ExecuteBuynowSale) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ExecuteBuynowSale")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                      buyer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                     seller", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                  saleState", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                    mintKey", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 buyerToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      exchgDepositAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("               mintMetadata", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("               exchgDeposit", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            cardinalManager", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        cardinalMintCounter", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       exchangeFeeRecipient", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("               instructions", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("     associatedTokenProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("cardinalTokenManagerProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("              systemProgram", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("                       rent", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj ExecuteBuynowSale) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ExecuteBuynowSale) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewExecuteBuynowSaleInstruction declares a new ExecuteBuynowSale instruction with the provided parameters and accounts.
func NewExecuteBuynowSaleInstruction(
	// Parameters:
	data ExecuteBuyNowSaleIxData,
	// Accounts:
	buyer ag_solanago.PublicKey,
	seller ag_solanago.PublicKey,
	saleStateAccount ag_solanago.PublicKey,
	mintKey ag_solanago.PublicKey,
	buyerTokenAccount ag_solanago.PublicKey,
	exchgDepositAuthority ag_solanago.PublicKey,
	mintMetadataAccount ag_solanago.PublicKey,
	exchgDepositAccount ag_solanago.PublicKey,
	cardinalManager ag_solanago.PublicKey,
	cardinalMintCounter ag_solanago.PublicKey,
	exchangeFeeRecipient ag_solanago.PublicKey,
	instructions ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	cardinalTokenManagerProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *ExecuteBuynowSale {
	return NewExecuteBuynowSaleInstructionBuilder().
		SetData(data).
		SetBuyerAccount(buyer).
		SetSellerAccount(seller).
		SetSaleStateAccountAccount(saleStateAccount).
		SetMintKeyAccount(mintKey).
		SetBuyerTokenAccountAccount(buyerTokenAccount).
		SetExchgDepositAuthorityAccount(exchgDepositAuthority).
		SetMintMetadataAccountAccount(mintMetadataAccount).
		SetExchgDepositAccountAccount(exchgDepositAccount).
		SetCardinalManagerAccount(cardinalManager).
		SetCardinalMintCounterAccount(cardinalMintCounter).
		SetExchangeFeeRecipientAccount(exchangeFeeRecipient).
		SetInstructionsAccount(instructions).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
