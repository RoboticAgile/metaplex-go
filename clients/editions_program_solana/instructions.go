// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_text "github.com/desperatee/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("EXBuYPNgBUXMTsjCbezENRUtFQzjUNZxvPGTd11Pznk5")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "EditionsProgramSolana"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_CreateFixedPriceEditionSale = ag_binary.TypeID([8]byte{215, 20, 71, 172, 239, 57, 204, 119})

	Instruction_CreateIncrementingPriceEditionSale = ag_binary.TypeID([8]byte{243, 52, 213, 72, 164, 190, 175, 247})

	Instruction_MintIncrementingPriceEdition = ag_binary.TypeID([8]byte{203, 226, 159, 72, 27, 173, 208, 181})

	Instruction_MintFixedPriceEdition = ag_binary.TypeID([8]byte{167, 52, 226, 173, 253, 233, 191, 62})

	Instruction_EndIncrementingPriceEditionSale = ag_binary.TypeID([8]byte{184, 195, 90, 10, 3, 4, 107, 170})

	Instruction_EndFixedPriceEditionSale = ag_binary.TypeID([8]byte{68, 84, 23, 241, 133, 111, 245, 55})

	Instruction_CreateRoyaltyProtectionMarker = ag_binary.TypeID([8]byte{114, 70, 189, 6, 141, 112, 101, 85})

	Instruction_EditBuynowSale = ag_binary.TypeID([8]byte{251, 222, 123, 213, 24, 69, 202, 187})

	Instruction_CancelBuynowSale = ag_binary.TypeID([8]byte{84, 238, 216, 246, 57, 45, 228, 91})

	Instruction_ExecuteBuynowSale = ag_binary.TypeID([8]byte{179, 38, 95, 237, 164, 54, 142, 182})

	Instruction_CreateBuynowRoyaltyProtectedSale = ag_binary.TypeID([8]byte{138, 141, 13, 187, 227, 104, 70, 88})

	Instruction_FreezeAndClaim = ag_binary.TypeID([8]byte{14, 110, 248, 160, 107, 154, 101, 220})

	Instruction_CreateTransferReceipt = ag_binary.TypeID([8]byte{5, 93, 64, 88, 161, 186, 50, 123})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreateFixedPriceEditionSale:
		return "CreateFixedPriceEditionSale"
	case Instruction_CreateIncrementingPriceEditionSale:
		return "CreateIncrementingPriceEditionSale"
	case Instruction_MintIncrementingPriceEdition:
		return "MintIncrementingPriceEdition"
	case Instruction_MintFixedPriceEdition:
		return "MintFixedPriceEdition"
	case Instruction_EndIncrementingPriceEditionSale:
		return "EndIncrementingPriceEditionSale"
	case Instruction_EndFixedPriceEditionSale:
		return "EndFixedPriceEditionSale"
	case Instruction_CreateRoyaltyProtectionMarker:
		return "CreateRoyaltyProtectionMarker"
	case Instruction_EditBuynowSale:
		return "EditBuynowSale"
	case Instruction_CancelBuynowSale:
		return "CancelBuynowSale"
	case Instruction_ExecuteBuynowSale:
		return "ExecuteBuynowSale"
	case Instruction_CreateBuynowRoyaltyProtectedSale:
		return "CreateBuynowRoyaltyProtectedSale"
	case Instruction_FreezeAndClaim:
		return "FreezeAndClaim"
	case Instruction_CreateTransferReceipt:
		return "CreateTransferReceipt"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create_fixed_price_edition_sale", (*CreateFixedPriceEditionSale)(nil),
		},
		{
			"create_incrementing_price_edition_sale", (*CreateIncrementingPriceEditionSale)(nil),
		},
		{
			"mint_incrementing_price_edition", (*MintIncrementingPriceEdition)(nil),
		},
		{
			"mint_fixed_price_edition", (*MintFixedPriceEdition)(nil),
		},
		{
			"end_incrementing_price_edition_sale", (*EndIncrementingPriceEditionSale)(nil),
		},
		{
			"end_fixed_price_edition_sale", (*EndFixedPriceEditionSale)(nil),
		},
		{
			"create_royalty_protection_marker", (*CreateRoyaltyProtectionMarker)(nil),
		},
		{
			"edit_buynow_sale", (*EditBuynowSale)(nil),
		},
		{
			"cancel_buynow_sale", (*CancelBuynowSale)(nil),
		},
		{
			"execute_buynow_sale", (*ExecuteBuynowSale)(nil),
		},
		{
			"create_buynow_royalty_protected_sale", (*CreateBuynowRoyaltyProtectedSale)(nil),
		},
		{
			"freeze_and_claim", (*FreezeAndClaim)(nil),
		},
		{
			"create_transfer_receipt", (*CreateTransferReceipt)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
