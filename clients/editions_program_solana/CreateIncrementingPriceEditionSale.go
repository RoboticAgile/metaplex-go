// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateIncrementingPriceEditionSale is the `createIncrementingPriceEditionSale` instruction.
type CreateIncrementingPriceEditionSale struct {
	Data *CreateIncrementingPriceEditionSaleIxData

	// [0] = [WRITE, SIGNER] seller
	//
	// [1] = [] masterMintKey
	//
	// [2] = [] pdaDepositAuthority
	//
	// [3] = [WRITE] masterEditionPda
	//
	// [4] = [WRITE, SIGNER] saleStateAccount
	//
	// [5] = [WRITE] depositAccountAddress
	//
	// [6] = [WRITE] sellerSourceTokenAccount
	//
	// [7] = [] systemProgram
	//
	// [8] = [] tokenProgram
	//
	// [9] = [] rent
	//
	// [10] = [] tokenMetadataProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateIncrementingPriceEditionSaleInstructionBuilder creates a new `CreateIncrementingPriceEditionSale` instruction builder.
func NewCreateIncrementingPriceEditionSaleInstructionBuilder() *CreateIncrementingPriceEditionSale {
	nd := &CreateIncrementingPriceEditionSale{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *CreateIncrementingPriceEditionSale) SetData(data CreateIncrementingPriceEditionSaleIxData) *CreateIncrementingPriceEditionSale {
	inst.Data = &data
	return inst
}

// SetSellerAccount sets the "seller" account.
func (inst *CreateIncrementingPriceEditionSale) SetSellerAccount(seller ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(seller).WRITE().SIGNER()
	return inst
}

// GetSellerAccount gets the "seller" account.
func (inst *CreateIncrementingPriceEditionSale) GetSellerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMasterMintKeyAccount sets the "masterMintKey" account.
func (inst *CreateIncrementingPriceEditionSale) SetMasterMintKeyAccount(masterMintKey ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(masterMintKey)
	return inst
}

// GetMasterMintKeyAccount gets the "masterMintKey" account.
func (inst *CreateIncrementingPriceEditionSale) GetMasterMintKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPdaDepositAuthorityAccount sets the "pdaDepositAuthority" account.
func (inst *CreateIncrementingPriceEditionSale) SetPdaDepositAuthorityAccount(pdaDepositAuthority ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pdaDepositAuthority)
	return inst
}

// GetPdaDepositAuthorityAccount gets the "pdaDepositAuthority" account.
func (inst *CreateIncrementingPriceEditionSale) GetPdaDepositAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMasterEditionPdaAccount sets the "masterEditionPda" account.
func (inst *CreateIncrementingPriceEditionSale) SetMasterEditionPdaAccount(masterEditionPda ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(masterEditionPda).WRITE()
	return inst
}

// GetMasterEditionPdaAccount gets the "masterEditionPda" account.
func (inst *CreateIncrementingPriceEditionSale) GetMasterEditionPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSaleStateAccountAccount sets the "saleStateAccount" account.
func (inst *CreateIncrementingPriceEditionSale) SetSaleStateAccountAccount(saleStateAccount ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(saleStateAccount).WRITE().SIGNER()
	return inst
}

// GetSaleStateAccountAccount gets the "saleStateAccount" account.
func (inst *CreateIncrementingPriceEditionSale) GetSaleStateAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetDepositAccountAddressAccount sets the "depositAccountAddress" account.
func (inst *CreateIncrementingPriceEditionSale) SetDepositAccountAddressAccount(depositAccountAddress ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(depositAccountAddress).WRITE()
	return inst
}

// GetDepositAccountAddressAccount gets the "depositAccountAddress" account.
func (inst *CreateIncrementingPriceEditionSale) GetDepositAccountAddressAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSellerSourceTokenAccountAccount sets the "sellerSourceTokenAccount" account.
func (inst *CreateIncrementingPriceEditionSale) SetSellerSourceTokenAccountAccount(sellerSourceTokenAccount ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(sellerSourceTokenAccount).WRITE()
	return inst
}

// GetSellerSourceTokenAccountAccount gets the "sellerSourceTokenAccount" account.
func (inst *CreateIncrementingPriceEditionSale) GetSellerSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateIncrementingPriceEditionSale) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateIncrementingPriceEditionSale) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateIncrementingPriceEditionSale) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateIncrementingPriceEditionSale) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
func (inst *CreateIncrementingPriceEditionSale) SetRentAccount(rent ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreateIncrementingPriceEditionSale) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *CreateIncrementingPriceEditionSale) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *CreateIncrementingPriceEditionSale) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst CreateIncrementingPriceEditionSale) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateIncrementingPriceEditionSale,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateIncrementingPriceEditionSale) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateIncrementingPriceEditionSale) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Seller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MasterMintKey is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PdaDepositAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MasterEditionPda is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SaleStateAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.DepositAccountAddress is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SellerSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
	}
	return nil
}

func (inst *CreateIncrementingPriceEditionSale) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateIncrementingPriceEditionSale")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               seller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        masterMintKey", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  pdaDepositAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     masterEditionPda", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            saleState", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("depositAccountAddress", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    sellerSourceToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                 rent", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta(" tokenMetadataProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj CreateIncrementingPriceEditionSale) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateIncrementingPriceEditionSale) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateIncrementingPriceEditionSaleInstruction declares a new CreateIncrementingPriceEditionSale instruction with the provided parameters and accounts.
func NewCreateIncrementingPriceEditionSaleInstruction(
	// Parameters:
	data CreateIncrementingPriceEditionSaleIxData,
	// Accounts:
	seller ag_solanago.PublicKey,
	masterMintKey ag_solanago.PublicKey,
	pdaDepositAuthority ag_solanago.PublicKey,
	masterEditionPda ag_solanago.PublicKey,
	saleStateAccount ag_solanago.PublicKey,
	depositAccountAddress ag_solanago.PublicKey,
	sellerSourceTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey) *CreateIncrementingPriceEditionSale {
	return NewCreateIncrementingPriceEditionSaleInstructionBuilder().
		SetData(data).
		SetSellerAccount(seller).
		SetMasterMintKeyAccount(masterMintKey).
		SetPdaDepositAuthorityAccount(pdaDepositAuthority).
		SetMasterEditionPdaAccount(masterEditionPda).
		SetSaleStateAccountAccount(saleStateAccount).
		SetDepositAccountAddressAccount(depositAccountAddress).
		SetSellerSourceTokenAccountAccount(sellerSourceTokenAccount).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent).
		SetTokenMetadataProgramAccount(tokenMetadataProgram)
}
