// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// FreezeAndClaim is the `freezeAndClaim` instruction.
type FreezeAndClaim struct {

	// [0] = [] mintKey
	//
	// [1] = [] mintEditionPda
	//
	// [2] = [WRITE] mintSourceTokenAccount
	//
	// [3] = [] mintSourceAuthority
	//
	// [4] = [SIGNER] mintRecipientAuthority
	//
	// [5] = [WRITE] mintRecipientTokenAccount
	//
	// [6] = [WRITE] cardinalManagerTokenAccount
	//
	// [7] = [WRITE] cardinalManager
	//
	// [8] = [] tokenProgram
	//
	// [9] = [] cardinalTokenManagerProgram
	//
	// [10] = [] associatedTokenProgram
	//
	// [11] = [] systemProgram
	//
	// [12] = [] instructions
	//
	// [13] = [] tokenMetadataProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFreezeAndClaimInstructionBuilder creates a new `FreezeAndClaim` instruction builder.
func NewFreezeAndClaimInstructionBuilder() *FreezeAndClaim {
	nd := &FreezeAndClaim{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetMintKeyAccount sets the "mintKey" account.
func (inst *FreezeAndClaim) SetMintKeyAccount(mintKey ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mintKey)
	return inst
}

// GetMintKeyAccount gets the "mintKey" account.
func (inst *FreezeAndClaim) GetMintKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintEditionPdaAccount sets the "mintEditionPda" account.
func (inst *FreezeAndClaim) SetMintEditionPdaAccount(mintEditionPda ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mintEditionPda)
	return inst
}

// GetMintEditionPdaAccount gets the "mintEditionPda" account.
func (inst *FreezeAndClaim) GetMintEditionPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintSourceTokenAccountAccount sets the "mintSourceTokenAccount" account.
func (inst *FreezeAndClaim) SetMintSourceTokenAccountAccount(mintSourceTokenAccount ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintSourceTokenAccount).WRITE()
	return inst
}

// GetMintSourceTokenAccountAccount gets the "mintSourceTokenAccount" account.
func (inst *FreezeAndClaim) GetMintSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintSourceAuthorityAccount sets the "mintSourceAuthority" account.
func (inst *FreezeAndClaim) SetMintSourceAuthorityAccount(mintSourceAuthority ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mintSourceAuthority)
	return inst
}

// GetMintSourceAuthorityAccount gets the "mintSourceAuthority" account.
func (inst *FreezeAndClaim) GetMintSourceAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMintRecipientAuthorityAccount sets the "mintRecipientAuthority" account.
func (inst *FreezeAndClaim) SetMintRecipientAuthorityAccount(mintRecipientAuthority ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mintRecipientAuthority).SIGNER()
	return inst
}

// GetMintRecipientAuthorityAccount gets the "mintRecipientAuthority" account.
func (inst *FreezeAndClaim) GetMintRecipientAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintRecipientTokenAccountAccount sets the "mintRecipientTokenAccount" account.
func (inst *FreezeAndClaim) SetMintRecipientTokenAccountAccount(mintRecipientTokenAccount ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mintRecipientTokenAccount).WRITE()
	return inst
}

// GetMintRecipientTokenAccountAccount gets the "mintRecipientTokenAccount" account.
func (inst *FreezeAndClaim) GetMintRecipientTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCardinalManagerTokenAccountAccount sets the "cardinalManagerTokenAccount" account.
func (inst *FreezeAndClaim) SetCardinalManagerTokenAccountAccount(cardinalManagerTokenAccount ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(cardinalManagerTokenAccount).WRITE()
	return inst
}

// GetCardinalManagerTokenAccountAccount gets the "cardinalManagerTokenAccount" account.
func (inst *FreezeAndClaim) GetCardinalManagerTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCardinalManagerAccount sets the "cardinalManager" account.
func (inst *FreezeAndClaim) SetCardinalManagerAccount(cardinalManager ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(cardinalManager).WRITE()
	return inst
}

// GetCardinalManagerAccount gets the "cardinalManager" account.
func (inst *FreezeAndClaim) GetCardinalManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *FreezeAndClaim) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *FreezeAndClaim) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetCardinalTokenManagerProgramAccount sets the "cardinalTokenManagerProgram" account.
func (inst *FreezeAndClaim) SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(cardinalTokenManagerProgram)
	return inst
}

// GetCardinalTokenManagerProgramAccount gets the "cardinalTokenManagerProgram" account.
func (inst *FreezeAndClaim) GetCardinalTokenManagerProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *FreezeAndClaim) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *FreezeAndClaim) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *FreezeAndClaim) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *FreezeAndClaim) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetInstructionsAccount sets the "instructions" account.
func (inst *FreezeAndClaim) SetInstructionsAccount(instructions ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(instructions)
	return inst
}

// GetInstructionsAccount gets the "instructions" account.
func (inst *FreezeAndClaim) GetInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *FreezeAndClaim) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *FreezeAndClaim {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *FreezeAndClaim) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst FreezeAndClaim) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FreezeAndClaim,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FreezeAndClaim) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FreezeAndClaim) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MintKey is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MintEditionPda is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MintSourceAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MintRecipientAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MintRecipientTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CardinalManagerTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CardinalManager is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CardinalTokenManagerProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Instructions is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
	}
	return nil
}

func (inst *FreezeAndClaim) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FreezeAndClaim")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    mintKey", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             mintEditionPda", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            mintSourceToken", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        mintSourceAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     mintRecipientAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         mintRecipientToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       cardinalManagerToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            cardinalManager", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("cardinalTokenManagerProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     associatedTokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("              systemProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("               instructions", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("       tokenMetadataProgram", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj FreezeAndClaim) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *FreezeAndClaim) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewFreezeAndClaimInstruction declares a new FreezeAndClaim instruction with the provided parameters and accounts.
func NewFreezeAndClaimInstruction(
	// Accounts:
	mintKey ag_solanago.PublicKey,
	mintEditionPda ag_solanago.PublicKey,
	mintSourceTokenAccount ag_solanago.PublicKey,
	mintSourceAuthority ag_solanago.PublicKey,
	mintRecipientAuthority ag_solanago.PublicKey,
	mintRecipientTokenAccount ag_solanago.PublicKey,
	cardinalManagerTokenAccount ag_solanago.PublicKey,
	cardinalManager ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	cardinalTokenManagerProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	instructions ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey) *FreezeAndClaim {
	return NewFreezeAndClaimInstructionBuilder().
		SetMintKeyAccount(mintKey).
		SetMintEditionPdaAccount(mintEditionPda).
		SetMintSourceTokenAccountAccount(mintSourceTokenAccount).
		SetMintSourceAuthorityAccount(mintSourceAuthority).
		SetMintRecipientAuthorityAccount(mintRecipientAuthority).
		SetMintRecipientTokenAccountAccount(mintRecipientTokenAccount).
		SetCardinalManagerTokenAccountAccount(cardinalManagerTokenAccount).
		SetCardinalManagerAccount(cardinalManager).
		SetTokenProgramAccount(tokenProgram).
		SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetInstructionsAccount(instructions).
		SetTokenMetadataProgramAccount(tokenMetadataProgram)
}
