// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
)

type CreateBuyNowSaleIxData struct {
	Bump     uint8
	Price    uint64
	Quantity uint16
}

func (obj CreateBuyNowSaleIxData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Quantity` param:
	err = encoder.Encode(obj.Quantity)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateBuyNowSaleIxData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Quantity`:
	err = decoder.Decode(&obj.Quantity)
	if err != nil {
		return err
	}
	return nil
}

type EditBuyNowSaleIxData struct {
	NewPrice uint64
}

func (obj EditBuyNowSaleIxData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewPrice` param:
	err = encoder.Encode(obj.NewPrice)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EditBuyNowSaleIxData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewPrice`:
	err = decoder.Decode(&obj.NewPrice)
	if err != nil {
		return err
	}
	return nil
}

type ExecuteBuyNowSaleIxData struct {
	Bump     uint8
	Price    uint64
	Quantity uint16
}

func (obj ExecuteBuyNowSaleIxData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Quantity` param:
	err = encoder.Encode(obj.Quantity)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExecuteBuyNowSaleIxData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Quantity`:
	err = decoder.Decode(&obj.Quantity)
	if err != nil {
		return err
	}
	return nil
}

type CreateTransferReceiptIxData struct {
	Target ag_solanago.PublicKey
}

func (obj CreateTransferReceiptIxData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Target` param:
	err = encoder.Encode(obj.Target)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateTransferReceiptIxData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Target`:
	err = decoder.Decode(&obj.Target)
	if err != nil {
		return err
	}
	return nil
}

type CreateFixedPriceEditionSaleIxData struct {
	Price             uint64
	Start             uint64
	SaleType          uint8
	WalletMintingCap  uint8
	PreSaleWindow     uint32
	RoyaltyProtection bool
}

func (obj CreateFixedPriceEditionSaleIxData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Start` param:
	err = encoder.Encode(obj.Start)
	if err != nil {
		return err
	}
	// Serialize `SaleType` param:
	err = encoder.Encode(obj.SaleType)
	if err != nil {
		return err
	}
	// Serialize `WalletMintingCap` param:
	err = encoder.Encode(obj.WalletMintingCap)
	if err != nil {
		return err
	}
	// Serialize `PreSaleWindow` param:
	err = encoder.Encode(obj.PreSaleWindow)
	if err != nil {
		return err
	}
	// Serialize `RoyaltyProtection` param:
	err = encoder.Encode(obj.RoyaltyProtection)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateFixedPriceEditionSaleIxData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Start`:
	err = decoder.Decode(&obj.Start)
	if err != nil {
		return err
	}
	// Deserialize `SaleType`:
	err = decoder.Decode(&obj.SaleType)
	if err != nil {
		return err
	}
	// Deserialize `WalletMintingCap`:
	err = decoder.Decode(&obj.WalletMintingCap)
	if err != nil {
		return err
	}
	// Deserialize `PreSaleWindow`:
	err = decoder.Decode(&obj.PreSaleWindow)
	if err != nil {
		return err
	}
	// Deserialize `RoyaltyProtection`:
	err = decoder.Decode(&obj.RoyaltyProtection)
	if err != nil {
		return err
	}
	return nil
}

type CreateIncrementingPriceEditionSaleIxData struct {
	Price       uint64
	PricingType uint64
	Increment   uint64
	SaleType    uint64
	Start       uint64
}

func (obj CreateIncrementingPriceEditionSaleIxData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `PricingType` param:
	err = encoder.Encode(obj.PricingType)
	if err != nil {
		return err
	}
	// Serialize `Increment` param:
	err = encoder.Encode(obj.Increment)
	if err != nil {
		return err
	}
	// Serialize `SaleType` param:
	err = encoder.Encode(obj.SaleType)
	if err != nil {
		return err
	}
	// Serialize `Start` param:
	err = encoder.Encode(obj.Start)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateIncrementingPriceEditionSaleIxData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `PricingType`:
	err = decoder.Decode(&obj.PricingType)
	if err != nil {
		return err
	}
	// Deserialize `Increment`:
	err = decoder.Decode(&obj.Increment)
	if err != nil {
		return err
	}
	// Deserialize `SaleType`:
	err = decoder.Decode(&obj.SaleType)
	if err != nil {
		return err
	}
	// Deserialize `Start`:
	err = decoder.Decode(&obj.Start)
	if err != nil {
		return err
	}
	return nil
}

type EndEditionSaleIxData struct {
	PermanentlyEnd bool
}

func (obj EndEditionSaleIxData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PermanentlyEnd` param:
	err = encoder.Encode(obj.PermanentlyEnd)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EndEditionSaleIxData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PermanentlyEnd`:
	err = decoder.Decode(&obj.PermanentlyEnd)
	if err != nil {
		return err
	}
	return nil
}

type MintFixedPriceEditionIxData struct {
	Timestamp uint32
	Price     uint64
	HmacCode  [32]uint8
}

func (obj MintFixedPriceEditionIxData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `HmacCode` param:
	err = encoder.Encode(obj.HmacCode)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MintFixedPriceEditionIxData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `HmacCode`:
	err = decoder.Decode(&obj.HmacCode)
	if err != nil {
		return err
	}
	return nil
}

type MintIncrementingPriceEditionIxData struct {
	EditionNo uint64
	Timestamp uint64
	Price     uint64
	HmacCode  [32]uint8
}

func (obj MintIncrementingPriceEditionIxData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EditionNo` param:
	err = encoder.Encode(obj.EditionNo)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `HmacCode` param:
	err = encoder.Encode(obj.HmacCode)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MintIncrementingPriceEditionIxData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EditionNo`:
	err = decoder.Decode(&obj.EditionNo)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `HmacCode`:
	err = decoder.Decode(&obj.HmacCode)
	if err != nil {
		return err
	}
	return nil
}
