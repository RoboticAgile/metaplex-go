// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
)

type FixedPriceEditionSaleState struct {
	IsInitialized         bool
	Initializer           ag_solanago.PublicKey
	MasterMintKey         ag_solanago.PublicKey
	DepositAccountAddress ag_solanago.PublicKey
	Price                 uint64
	Start                 uint64
	WalletMintingCap      uint8
	SaleType              uint8
	PreSaleWindow         uint32
	RoyaltyProtection     bool
	Padding2              [25]uint8
	Padding3              [30]uint8
}

var FixedPriceEditionSaleStateDiscriminator = [8]byte{59, 241, 46, 90, 15, 4, 181, 79}

func (obj FixedPriceEditionSaleState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FixedPriceEditionSaleStateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `Initializer` param:
	err = encoder.Encode(obj.Initializer)
	if err != nil {
		return err
	}
	// Serialize `MasterMintKey` param:
	err = encoder.Encode(obj.MasterMintKey)
	if err != nil {
		return err
	}
	// Serialize `DepositAccountAddress` param:
	err = encoder.Encode(obj.DepositAccountAddress)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Start` param:
	err = encoder.Encode(obj.Start)
	if err != nil {
		return err
	}
	// Serialize `WalletMintingCap` param:
	err = encoder.Encode(obj.WalletMintingCap)
	if err != nil {
		return err
	}
	// Serialize `SaleType` param:
	err = encoder.Encode(obj.SaleType)
	if err != nil {
		return err
	}
	// Serialize `PreSaleWindow` param:
	err = encoder.Encode(obj.PreSaleWindow)
	if err != nil {
		return err
	}
	// Serialize `RoyaltyProtection` param:
	err = encoder.Encode(obj.RoyaltyProtection)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `Padding3` param:
	err = encoder.Encode(obj.Padding3)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FixedPriceEditionSaleState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FixedPriceEditionSaleStateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[59 241 46 90 15 4 181 79]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `Initializer`:
	err = decoder.Decode(&obj.Initializer)
	if err != nil {
		return err
	}
	// Deserialize `MasterMintKey`:
	err = decoder.Decode(&obj.MasterMintKey)
	if err != nil {
		return err
	}
	// Deserialize `DepositAccountAddress`:
	err = decoder.Decode(&obj.DepositAccountAddress)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Start`:
	err = decoder.Decode(&obj.Start)
	if err != nil {
		return err
	}
	// Deserialize `WalletMintingCap`:
	err = decoder.Decode(&obj.WalletMintingCap)
	if err != nil {
		return err
	}
	// Deserialize `SaleType`:
	err = decoder.Decode(&obj.SaleType)
	if err != nil {
		return err
	}
	// Deserialize `PreSaleWindow`:
	err = decoder.Decode(&obj.PreSaleWindow)
	if err != nil {
		return err
	}
	// Deserialize `RoyaltyProtection`:
	err = decoder.Decode(&obj.RoyaltyProtection)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `Padding3`:
	err = decoder.Decode(&obj.Padding3)
	if err != nil {
		return err
	}
	return nil
}

type SaleAccount struct {
	IsInitialized         bool
	Initializer           ag_solanago.PublicKey
	MasterMintKey         ag_solanago.PublicKey
	DepositAccountAddress ag_solanago.PublicKey
	PricingType           uint64
	Price                 uint64
	Increment             uint64
	SaleType              uint64
	Start                 uint64
	PrevMintTimestamp     uint64
	Padding1              [22]uint8
	Padding2              [30]uint8
	Padding3              [30]uint8
	Padding4              [30]uint8
}

var SaleAccountDiscriminator = [8]byte{213, 18, 87, 228, 218, 230, 207, 182}

func (obj SaleAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SaleAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `Initializer` param:
	err = encoder.Encode(obj.Initializer)
	if err != nil {
		return err
	}
	// Serialize `MasterMintKey` param:
	err = encoder.Encode(obj.MasterMintKey)
	if err != nil {
		return err
	}
	// Serialize `DepositAccountAddress` param:
	err = encoder.Encode(obj.DepositAccountAddress)
	if err != nil {
		return err
	}
	// Serialize `PricingType` param:
	err = encoder.Encode(obj.PricingType)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Increment` param:
	err = encoder.Encode(obj.Increment)
	if err != nil {
		return err
	}
	// Serialize `SaleType` param:
	err = encoder.Encode(obj.SaleType)
	if err != nil {
		return err
	}
	// Serialize `Start` param:
	err = encoder.Encode(obj.Start)
	if err != nil {
		return err
	}
	// Serialize `PrevMintTimestamp` param:
	err = encoder.Encode(obj.PrevMintTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `Padding3` param:
	err = encoder.Encode(obj.Padding3)
	if err != nil {
		return err
	}
	// Serialize `Padding4` param:
	err = encoder.Encode(obj.Padding4)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SaleAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SaleAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[213 18 87 228 218 230 207 182]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `Initializer`:
	err = decoder.Decode(&obj.Initializer)
	if err != nil {
		return err
	}
	// Deserialize `MasterMintKey`:
	err = decoder.Decode(&obj.MasterMintKey)
	if err != nil {
		return err
	}
	// Deserialize `DepositAccountAddress`:
	err = decoder.Decode(&obj.DepositAccountAddress)
	if err != nil {
		return err
	}
	// Deserialize `PricingType`:
	err = decoder.Decode(&obj.PricingType)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Increment`:
	err = decoder.Decode(&obj.Increment)
	if err != nil {
		return err
	}
	// Deserialize `SaleType`:
	err = decoder.Decode(&obj.SaleType)
	if err != nil {
		return err
	}
	// Deserialize `Start`:
	err = decoder.Decode(&obj.Start)
	if err != nil {
		return err
	}
	// Deserialize `PrevMintTimestamp`:
	err = decoder.Decode(&obj.PrevMintTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `Padding3`:
	err = decoder.Decode(&obj.Padding3)
	if err != nil {
		return err
	}
	// Deserialize `Padding4`:
	err = decoder.Decode(&obj.Padding4)
	if err != nil {
		return err
	}
	return nil
}

type WalletMintingState struct {
	NumMinted uint8
}

var WalletMintingStateDiscriminator = [8]byte{191, 97, 167, 235, 218, 58, 70, 77}

func (obj WalletMintingState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WalletMintingStateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `NumMinted` param:
	err = encoder.Encode(obj.NumMinted)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WalletMintingState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WalletMintingStateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[191 97 167 235 218 58 70 77]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `NumMinted`:
	err = decoder.Decode(&obj.NumMinted)
	if err != nil {
		return err
	}
	return nil
}

type RoyaltyProtectionMarker struct {
	IsProtected bool
	Authority   ag_solanago.PublicKey
	Payer       ag_solanago.PublicKey
	Padding1    [30]uint8
}

var RoyaltyProtectionMarkerDiscriminator = [8]byte{156, 213, 151, 19, 182, 86, 97, 37}

func (obj RoyaltyProtectionMarker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RoyaltyProtectionMarkerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsProtected` param:
	err = encoder.Encode(obj.IsProtected)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Payer` param:
	err = encoder.Encode(obj.Payer)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RoyaltyProtectionMarker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RoyaltyProtectionMarkerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[156 213 151 19 182 86 97 37]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsProtected`:
	err = decoder.Decode(&obj.IsProtected)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Payer`:
	err = decoder.Decode(&obj.Payer)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	return nil
}

type BuyNowSaleState struct {
	IsInitialized     bool
	Price             uint64
	Seller            ag_solanago.PublicKey
	MintPubkey        ag_solanago.PublicKey
	Quantity          uint16
	RoyaltyProtection bool
	Padding2          [30]uint8
	Padding3          [30]uint8
	Padding4          [30]uint8
}

var BuyNowSaleStateDiscriminator = [8]byte{117, 149, 198, 73, 121, 43, 196, 98}

func (obj BuyNowSaleState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BuyNowSaleStateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Seller` param:
	err = encoder.Encode(obj.Seller)
	if err != nil {
		return err
	}
	// Serialize `MintPubkey` param:
	err = encoder.Encode(obj.MintPubkey)
	if err != nil {
		return err
	}
	// Serialize `Quantity` param:
	err = encoder.Encode(obj.Quantity)
	if err != nil {
		return err
	}
	// Serialize `RoyaltyProtection` param:
	err = encoder.Encode(obj.RoyaltyProtection)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `Padding3` param:
	err = encoder.Encode(obj.Padding3)
	if err != nil {
		return err
	}
	// Serialize `Padding4` param:
	err = encoder.Encode(obj.Padding4)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BuyNowSaleState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BuyNowSaleStateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[117 149 198 73 121 43 196 98]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Seller`:
	err = decoder.Decode(&obj.Seller)
	if err != nil {
		return err
	}
	// Deserialize `MintPubkey`:
	err = decoder.Decode(&obj.MintPubkey)
	if err != nil {
		return err
	}
	// Deserialize `Quantity`:
	err = decoder.Decode(&obj.Quantity)
	if err != nil {
		return err
	}
	// Deserialize `RoyaltyProtection`:
	err = decoder.Decode(&obj.RoyaltyProtection)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `Padding3`:
	err = decoder.Decode(&obj.Padding3)
	if err != nil {
		return err
	}
	// Deserialize `Padding4`:
	err = decoder.Decode(&obj.Padding4)
	if err != nil {
		return err
	}
	return nil
}
