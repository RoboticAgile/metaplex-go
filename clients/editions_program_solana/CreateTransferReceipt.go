// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateTransferReceipt is the `createTransferReceipt` instruction.
type CreateTransferReceipt struct {
	Data *CreateTransferReceiptIxData

	// [0] = [] exchgDepositAuthority
	//
	// [1] = [WRITE] cardinalManager
	//
	// [2] = [WRITE] mintKey
	//
	// [3] = [WRITE] mintSourceTokenAccount
	//
	// [4] = [WRITE] transferReceipt
	//
	// [5] = [WRITE, SIGNER] currentHolder
	//
	// [6] = [] cardinalTokenManagerProgram
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateTransferReceiptInstructionBuilder creates a new `CreateTransferReceipt` instruction builder.
func NewCreateTransferReceiptInstructionBuilder() *CreateTransferReceipt {
	nd := &CreateTransferReceipt{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *CreateTransferReceipt) SetData(data CreateTransferReceiptIxData) *CreateTransferReceipt {
	inst.Data = &data
	return inst
}

// SetExchgDepositAuthorityAccount sets the "exchgDepositAuthority" account.
func (inst *CreateTransferReceipt) SetExchgDepositAuthorityAccount(exchgDepositAuthority ag_solanago.PublicKey) *CreateTransferReceipt {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(exchgDepositAuthority)
	return inst
}

// GetExchgDepositAuthorityAccount gets the "exchgDepositAuthority" account.
func (inst *CreateTransferReceipt) GetExchgDepositAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCardinalManagerAccount sets the "cardinalManager" account.
func (inst *CreateTransferReceipt) SetCardinalManagerAccount(cardinalManager ag_solanago.PublicKey) *CreateTransferReceipt {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(cardinalManager).WRITE()
	return inst
}

// GetCardinalManagerAccount gets the "cardinalManager" account.
func (inst *CreateTransferReceipt) GetCardinalManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintKeyAccount sets the "mintKey" account.
func (inst *CreateTransferReceipt) SetMintKeyAccount(mintKey ag_solanago.PublicKey) *CreateTransferReceipt {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintKey).WRITE()
	return inst
}

// GetMintKeyAccount gets the "mintKey" account.
func (inst *CreateTransferReceipt) GetMintKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintSourceTokenAccountAccount sets the "mintSourceTokenAccount" account.
func (inst *CreateTransferReceipt) SetMintSourceTokenAccountAccount(mintSourceTokenAccount ag_solanago.PublicKey) *CreateTransferReceipt {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mintSourceTokenAccount).WRITE()
	return inst
}

// GetMintSourceTokenAccountAccount gets the "mintSourceTokenAccount" account.
func (inst *CreateTransferReceipt) GetMintSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTransferReceiptAccount sets the "transferReceipt" account.
func (inst *CreateTransferReceipt) SetTransferReceiptAccount(transferReceipt ag_solanago.PublicKey) *CreateTransferReceipt {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(transferReceipt).WRITE()
	return inst
}

// GetTransferReceiptAccount gets the "transferReceipt" account.
func (inst *CreateTransferReceipt) GetTransferReceiptAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCurrentHolderAccount sets the "currentHolder" account.
func (inst *CreateTransferReceipt) SetCurrentHolderAccount(currentHolder ag_solanago.PublicKey) *CreateTransferReceipt {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(currentHolder).WRITE().SIGNER()
	return inst
}

// GetCurrentHolderAccount gets the "currentHolder" account.
func (inst *CreateTransferReceipt) GetCurrentHolderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCardinalTokenManagerProgramAccount sets the "cardinalTokenManagerProgram" account.
func (inst *CreateTransferReceipt) SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram ag_solanago.PublicKey) *CreateTransferReceipt {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(cardinalTokenManagerProgram)
	return inst
}

// GetCardinalTokenManagerProgramAccount gets the "cardinalTokenManagerProgram" account.
func (inst *CreateTransferReceipt) GetCardinalTokenManagerProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateTransferReceipt) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateTransferReceipt {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateTransferReceipt) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateTransferReceipt) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateTransferReceipt {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateTransferReceipt) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst CreateTransferReceipt) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateTransferReceipt,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateTransferReceipt) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateTransferReceipt) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ExchgDepositAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CardinalManager is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintKey is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MintSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TransferReceipt is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CurrentHolder is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CardinalTokenManagerProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateTransferReceipt) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateTransferReceipt")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      exchgDepositAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            cardinalManager", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                    mintKey", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            mintSourceToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            transferReceipt", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              currentHolder", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("cardinalTokenManagerProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              systemProgram", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj CreateTransferReceipt) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateTransferReceipt) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateTransferReceiptInstruction declares a new CreateTransferReceipt instruction with the provided parameters and accounts.
func NewCreateTransferReceiptInstruction(
	// Parameters:
	data CreateTransferReceiptIxData,
	// Accounts:
	exchgDepositAuthority ag_solanago.PublicKey,
	cardinalManager ag_solanago.PublicKey,
	mintKey ag_solanago.PublicKey,
	mintSourceTokenAccount ag_solanago.PublicKey,
	transferReceipt ag_solanago.PublicKey,
	currentHolder ag_solanago.PublicKey,
	cardinalTokenManagerProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateTransferReceipt {
	return NewCreateTransferReceiptInstructionBuilder().
		SetData(data).
		SetExchgDepositAuthorityAccount(exchgDepositAuthority).
		SetCardinalManagerAccount(cardinalManager).
		SetMintKeyAccount(mintKey).
		SetMintSourceTokenAccountAccount(mintSourceTokenAccount).
		SetTransferReceiptAccount(transferReceipt).
		SetCurrentHolderAccount(currentHolder).
		SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram)
}
