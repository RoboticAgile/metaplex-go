// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EditBuynowSale is the `editBuynowSale` instruction.
type EditBuynowSale struct {
	Data *EditBuyNowSaleIxData

	// [0] = [WRITE, SIGNER] seller
	//
	// [1] = [WRITE] saleStateAccount
	//
	// [2] = [] mintKey
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEditBuynowSaleInstructionBuilder creates a new `EditBuynowSale` instruction builder.
func NewEditBuynowSaleInstructionBuilder() *EditBuynowSale {
	nd := &EditBuynowSale{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *EditBuynowSale) SetData(data EditBuyNowSaleIxData) *EditBuynowSale {
	inst.Data = &data
	return inst
}

// SetSellerAccount sets the "seller" account.
func (inst *EditBuynowSale) SetSellerAccount(seller ag_solanago.PublicKey) *EditBuynowSale {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(seller).WRITE().SIGNER()
	return inst
}

// GetSellerAccount gets the "seller" account.
func (inst *EditBuynowSale) GetSellerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSaleStateAccountAccount sets the "saleStateAccount" account.
func (inst *EditBuynowSale) SetSaleStateAccountAccount(saleStateAccount ag_solanago.PublicKey) *EditBuynowSale {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(saleStateAccount).WRITE()
	return inst
}

// GetSaleStateAccountAccount gets the "saleStateAccount" account.
func (inst *EditBuynowSale) GetSaleStateAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintKeyAccount sets the "mintKey" account.
func (inst *EditBuynowSale) SetMintKeyAccount(mintKey ag_solanago.PublicKey) *EditBuynowSale {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintKey)
	return inst
}

// GetMintKeyAccount gets the "mintKey" account.
func (inst *EditBuynowSale) GetMintKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst EditBuynowSale) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_EditBuynowSale,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EditBuynowSale) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EditBuynowSale) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Seller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SaleStateAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintKey is not set")
		}
	}
	return nil
}

func (inst *EditBuynowSale) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EditBuynowSale")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   seller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("saleState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  mintKey", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj EditBuynowSale) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *EditBuynowSale) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewEditBuynowSaleInstruction declares a new EditBuynowSale instruction with the provided parameters and accounts.
func NewEditBuynowSaleInstruction(
	// Parameters:
	data EditBuyNowSaleIxData,
	// Accounts:
	seller ag_solanago.PublicKey,
	saleStateAccount ag_solanago.PublicKey,
	mintKey ag_solanago.PublicKey) *EditBuynowSale {
	return NewEditBuynowSaleInstructionBuilder().
		SetData(data).
		SetSellerAccount(seller).
		SetSaleStateAccountAccount(saleStateAccount).
		SetMintKeyAccount(mintKey)
}
