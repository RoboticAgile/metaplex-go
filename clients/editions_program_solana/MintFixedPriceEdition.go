// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintFixedPriceEdition is the `mintFixedPriceEdition` instruction.
type MintFixedPriceEdition struct {
	Data *MintFixedPriceEditionIxData

	// [0] = [WRITE, SIGNER] buyer
	//
	// [1] = [] masterMintKey
	//
	// [2] = [WRITE] masterEditionPda
	//
	// [3] = [] masterMetadataPda
	//
	// [4] = [] seller
	//
	// [5] = [WRITE] saleStateAccount
	//
	// [6] = [WRITE] newEditionMetadataPda
	//
	// [7] = [WRITE] newEditionPda
	//
	// [8] = [WRITE] newEditionMintKey
	//
	// [9] = [WRITE] walletMintingState
	//
	// [10] = [WRITE] editionMarkPda
	//
	// [11] = [WRITE] exchgMasterEditionDepositAccount
	//
	// [12] = [WRITE] newEditionDepositAccount
	//
	// [13] = [WRITE] newEditionDepositAuthority
	//
	// [14] = [WRITE] exchangeFeeRecipient
	//
	// [15] = [] exchgMasterEditionDepositAuthority
	//
	// [16] = [WRITE] cardinalManager
	//
	// [17] = [WRITE] cardinalMintCounter
	//
	// [18] = [] tokenProgram
	//
	// [19] = [] tokenMetadataProgram
	//
	// [20] = [] cardinalTokenManagerProgram
	//
	// [21] = [] systemProgram
	//
	// [22] = [] rent
	//
	// [23] = [] instructions
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintFixedPriceEditionInstructionBuilder creates a new `MintFixedPriceEdition` instruction builder.
func NewMintFixedPriceEditionInstructionBuilder() *MintFixedPriceEdition {
	nd := &MintFixedPriceEdition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 30),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *MintFixedPriceEdition) SetData(data MintFixedPriceEditionIxData) *MintFixedPriceEdition {
	inst.Data = &data
	return inst
}

// SetBuyerAccount sets the "buyer" account.
func (inst *MintFixedPriceEdition) SetBuyerAccount(buyer ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(buyer).WRITE().SIGNER()
	return inst
}

// GetBuyerAccount gets the "buyer" account.
func (inst *MintFixedPriceEdition) GetBuyerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMasterMintKeyAccount sets the "masterMintKey" account.
func (inst *MintFixedPriceEdition) SetMasterMintKeyAccount(masterMintKey ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(masterMintKey)
	return inst
}

// GetMasterMintKeyAccount gets the "masterMintKey" account.
func (inst *MintFixedPriceEdition) GetMasterMintKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMasterEditionPdaAccount sets the "masterEditionPda" account.
func (inst *MintFixedPriceEdition) SetMasterEditionPdaAccount(masterEditionPda ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(masterEditionPda).WRITE()
	return inst
}

// GetMasterEditionPdaAccount gets the "masterEditionPda" account.
func (inst *MintFixedPriceEdition) GetMasterEditionPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMasterMetadataPdaAccount sets the "masterMetadataPda" account.
func (inst *MintFixedPriceEdition) SetMasterMetadataPdaAccount(masterMetadataPda ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(masterMetadataPda)
	return inst
}

// GetMasterMetadataPdaAccount gets the "masterMetadataPda" account.
func (inst *MintFixedPriceEdition) GetMasterMetadataPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSellerAccount sets the "seller" account.
func (inst *MintFixedPriceEdition) SetSellerAccount(seller ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(seller)
	return inst
}

// GetSellerAccount gets the "seller" account.
func (inst *MintFixedPriceEdition) GetSellerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSaleStateAccountAccount sets the "saleStateAccount" account.
func (inst *MintFixedPriceEdition) SetSaleStateAccountAccount(saleStateAccount ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(saleStateAccount).WRITE()
	return inst
}

// GetSaleStateAccountAccount gets the "saleStateAccount" account.
func (inst *MintFixedPriceEdition) GetSaleStateAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetNewEditionMetadataPdaAccount sets the "newEditionMetadataPda" account.
func (inst *MintFixedPriceEdition) SetNewEditionMetadataPdaAccount(newEditionMetadataPda ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(newEditionMetadataPda).WRITE()
	return inst
}

// GetNewEditionMetadataPdaAccount gets the "newEditionMetadataPda" account.
func (inst *MintFixedPriceEdition) GetNewEditionMetadataPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetNewEditionPdaAccount sets the "newEditionPda" account.
func (inst *MintFixedPriceEdition) SetNewEditionPdaAccount(newEditionPda ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(newEditionPda).WRITE()
	return inst
}

// GetNewEditionPdaAccount gets the "newEditionPda" account.
func (inst *MintFixedPriceEdition) GetNewEditionPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetNewEditionMintKeyAccount sets the "newEditionMintKey" account.
func (inst *MintFixedPriceEdition) SetNewEditionMintKeyAccount(newEditionMintKey ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(newEditionMintKey).WRITE()
	return inst
}

// GetNewEditionMintKeyAccount gets the "newEditionMintKey" account.
func (inst *MintFixedPriceEdition) GetNewEditionMintKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetWalletMintingStateAccount sets the "walletMintingState" account.
func (inst *MintFixedPriceEdition) SetWalletMintingStateAccount(walletMintingState ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(walletMintingState).WRITE()
	return inst
}

// GetWalletMintingStateAccount gets the "walletMintingState" account.
func (inst *MintFixedPriceEdition) GetWalletMintingStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetEditionMarkPdaAccount sets the "editionMarkPda" account.
func (inst *MintFixedPriceEdition) SetEditionMarkPdaAccount(editionMarkPda ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(editionMarkPda).WRITE()
	return inst
}

// GetEditionMarkPdaAccount gets the "editionMarkPda" account.
func (inst *MintFixedPriceEdition) GetEditionMarkPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetExchgMasterEditionDepositAccountAccount sets the "exchgMasterEditionDepositAccount" account.
func (inst *MintFixedPriceEdition) SetExchgMasterEditionDepositAccountAccount(exchgMasterEditionDepositAccount ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(exchgMasterEditionDepositAccount).WRITE()
	return inst
}

// GetExchgMasterEditionDepositAccountAccount gets the "exchgMasterEditionDepositAccount" account.
func (inst *MintFixedPriceEdition) GetExchgMasterEditionDepositAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetNewEditionDepositAccountAccount sets the "newEditionDepositAccount" account.
func (inst *MintFixedPriceEdition) SetNewEditionDepositAccountAccount(newEditionDepositAccount ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(newEditionDepositAccount).WRITE()
	return inst
}

// GetNewEditionDepositAccountAccount gets the "newEditionDepositAccount" account.
func (inst *MintFixedPriceEdition) GetNewEditionDepositAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetNewEditionDepositAuthorityAccount sets the "newEditionDepositAuthority" account.
func (inst *MintFixedPriceEdition) SetNewEditionDepositAuthorityAccount(newEditionDepositAuthority ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(newEditionDepositAuthority).WRITE()
	return inst
}

// GetNewEditionDepositAuthorityAccount gets the "newEditionDepositAuthority" account.
func (inst *MintFixedPriceEdition) GetNewEditionDepositAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetExchangeFeeRecipientAccount sets the "exchangeFeeRecipient" account.
func (inst *MintFixedPriceEdition) SetExchangeFeeRecipientAccount(exchangeFeeRecipient ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(exchangeFeeRecipient).WRITE()
	return inst
}

// GetExchangeFeeRecipientAccount gets the "exchangeFeeRecipient" account.
func (inst *MintFixedPriceEdition) GetExchangeFeeRecipientAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetExchgMasterEditionDepositAuthorityAccount sets the "exchgMasterEditionDepositAuthority" account.
func (inst *MintFixedPriceEdition) SetExchgMasterEditionDepositAuthorityAccount(exchgMasterEditionDepositAuthority ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(exchgMasterEditionDepositAuthority)
	return inst
}

// GetExchgMasterEditionDepositAuthorityAccount gets the "exchgMasterEditionDepositAuthority" account.
func (inst *MintFixedPriceEdition) GetExchgMasterEditionDepositAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetCardinalManagerAccount sets the "cardinalManager" account.
func (inst *MintFixedPriceEdition) SetCardinalManagerAccount(cardinalManager ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(cardinalManager).WRITE()
	return inst
}

// GetCardinalManagerAccount gets the "cardinalManager" account.
func (inst *MintFixedPriceEdition) GetCardinalManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetCardinalMintCounterAccount sets the "cardinalMintCounter" account.
func (inst *MintFixedPriceEdition) SetCardinalMintCounterAccount(cardinalMintCounter ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(cardinalMintCounter).WRITE()
	return inst
}

// GetCardinalMintCounterAccount gets the "cardinalMintCounter" account.
func (inst *MintFixedPriceEdition) GetCardinalMintCounterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintFixedPriceEdition) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintFixedPriceEdition) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintFixedPriceEdition) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintFixedPriceEdition) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetCardinalTokenManagerProgramAccount sets the "cardinalTokenManagerProgram" account.
func (inst *MintFixedPriceEdition) SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(cardinalTokenManagerProgram)
	return inst
}

// GetCardinalTokenManagerProgramAccount gets the "cardinalTokenManagerProgram" account.
func (inst *MintFixedPriceEdition) GetCardinalTokenManagerProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintFixedPriceEdition) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintFixedPriceEdition) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetRentAccount sets the "rent" account.
func (inst *MintFixedPriceEdition) SetRentAccount(rent ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MintFixedPriceEdition) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetInstructionsAccount sets the "instructions" account.
func (inst *MintFixedPriceEdition) SetInstructionsAccount(instructions ag_solanago.PublicKey) *MintFixedPriceEdition {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(instructions)
	return inst
}

// GetInstructionsAccount gets the "instructions" account.
func (inst *MintFixedPriceEdition) GetInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetRemainingAccounts sets the additional accounts required in the instruction.
func (inst *MintFixedPriceEdition) SetRemainingAccounts(pk []ag_solanago.AccountMeta) *MintFixedPriceEdition {
	amount := len(pk)
	if amount == 0 {
		return inst
	}
	for i := 0; i < amount; i++ {
		inst.AccountMetaSlice[24+i] = &pk[i]
	}
	return inst
}

func (inst MintFixedPriceEdition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintFixedPriceEdition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintFixedPriceEdition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintFixedPriceEdition) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Buyer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MasterMintKey is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MasterEditionPda is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MasterMetadataPda is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Seller is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SaleStateAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.NewEditionMetadataPda is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.NewEditionPda is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.NewEditionMintKey is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.WalletMintingState is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.EditionMarkPda is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.ExchgMasterEditionDepositAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.NewEditionDepositAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.NewEditionDepositAuthority is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.ExchangeFeeRecipient is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.ExchgMasterEditionDepositAuthority is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.CardinalManager is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.CardinalMintCounter is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.CardinalTokenManagerProgram is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.Instructions is not set")
		}
	}
	return nil
}

func (inst *MintFixedPriceEdition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintFixedPriceEdition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=24]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                             buyer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                     masterMintKey", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                  masterEditionPda", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 masterMetadataPda", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                            seller", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                         saleState", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             newEditionMetadataPda", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                     newEditionPda", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                 newEditionMintKey", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                walletMintingState", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                    editionMarkPda", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("         exchgMasterEditionDeposit", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                 newEditionDeposit", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        newEditionDepositAuthority", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("              exchangeFeeRecipient", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("exchgMasterEditionDepositAuthority", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("                   cardinalManager", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("               cardinalMintCounter", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("                      tokenProgram", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("              tokenMetadataProgram", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("       cardinalTokenManagerProgram", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("                     systemProgram", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("                              rent", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("                      instructions", inst.AccountMetaSlice.Get(23)))
					})
				})
		})
}

func (obj MintFixedPriceEdition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintFixedPriceEdition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewMintFixedPriceEditionInstruction declares a new MintFixedPriceEdition instruction with the provided parameters and accounts.
func NewMintFixedPriceEditionInstruction(
	// Parameters:
	data MintFixedPriceEditionIxData,
	// Accounts:
	buyer ag_solanago.PublicKey,
	masterMintKey ag_solanago.PublicKey,
	masterEditionPda ag_solanago.PublicKey,
	masterMetadataPda ag_solanago.PublicKey,
	seller ag_solanago.PublicKey,
	saleStateAccount ag_solanago.PublicKey,
	newEditionMetadataPda ag_solanago.PublicKey,
	newEditionPda ag_solanago.PublicKey,
	newEditionMintKey ag_solanago.PublicKey,
	walletMintingState ag_solanago.PublicKey,
	editionMarkPda ag_solanago.PublicKey,
	exchgMasterEditionDepositAccount ag_solanago.PublicKey,
	newEditionDepositAccount ag_solanago.PublicKey,
	newEditionDepositAuthority ag_solanago.PublicKey,
	exchangeFeeRecipient ag_solanago.PublicKey,
	exchgMasterEditionDepositAuthority ag_solanago.PublicKey,
	cardinalManager ag_solanago.PublicKey,
	cardinalMintCounter ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	cardinalTokenManagerProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	instructions ag_solanago.PublicKey,
	remainingAccounts []ag_solanago.AccountMeta) *MintFixedPriceEdition {
	return NewMintFixedPriceEditionInstructionBuilder().
		SetData(data).
		SetBuyerAccount(buyer).
		SetMasterMintKeyAccount(masterMintKey).
		SetMasterEditionPdaAccount(masterEditionPda).
		SetMasterMetadataPdaAccount(masterMetadataPda).
		SetSellerAccount(seller).
		SetSaleStateAccountAccount(saleStateAccount).
		SetNewEditionMetadataPdaAccount(newEditionMetadataPda).
		SetNewEditionPdaAccount(newEditionPda).
		SetNewEditionMintKeyAccount(newEditionMintKey).
		SetWalletMintingStateAccount(walletMintingState).
		SetEditionMarkPdaAccount(editionMarkPda).
		SetExchgMasterEditionDepositAccountAccount(exchgMasterEditionDepositAccount).
		SetNewEditionDepositAccountAccount(newEditionDepositAccount).
		SetNewEditionDepositAuthorityAccount(newEditionDepositAuthority).
		SetExchangeFeeRecipientAccount(exchangeFeeRecipient).
		SetExchgMasterEditionDepositAuthorityAccount(exchgMasterEditionDepositAuthority).
		SetCardinalManagerAccount(cardinalManager).
		SetCardinalMintCounterAccount(cardinalMintCounter).
		SetTokenProgramAccount(tokenProgram).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetInstructionsAccount(instructions).
		SetRemainingAccounts(remainingAccounts)
}
