// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package editions_program_solana

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateBuynowRoyaltyProtectedSale is the `createBuynowRoyaltyProtectedSale` instruction.
type CreateBuynowRoyaltyProtectedSale struct {
	Data *CreateBuyNowSaleIxData

	// [0] = [WRITE, SIGNER] seller
	//
	// [1] = [WRITE] sellerSourceTokenAccount
	//
	// [2] = [] exchgDepositAuthority
	//
	// [3] = [WRITE] exchgDepositAccount
	//
	// [4] = [WRITE, SIGNER] saleStateAccount
	//
	// [5] = [WRITE] mintKey
	//
	// [6] = [] royaltyProtectionMarker
	//
	// [7] = [WRITE] cardinalManager
	//
	// [8] = [WRITE] cardinalManagerTokenAccount
	//
	// [9] = [] editionPda
	//
	// [10] = [WRITE] exchangeFeeRecipient
	//
	// [11] = [] tokenMetadataProgram
	//
	// [12] = [] tokenProgram
	//
	// [13] = [] cardinalTokenManagerProgram
	//
	// [14] = [] systemProgram
	//
	// [15] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateBuynowRoyaltyProtectedSaleInstructionBuilder creates a new `CreateBuynowRoyaltyProtectedSale` instruction builder.
func NewCreateBuynowRoyaltyProtectedSaleInstructionBuilder() *CreateBuynowRoyaltyProtectedSale {
	nd := &CreateBuynowRoyaltyProtectedSale{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *CreateBuynowRoyaltyProtectedSale) SetData(data CreateBuyNowSaleIxData) *CreateBuynowRoyaltyProtectedSale {
	inst.Data = &data
	return inst
}

// SetSellerAccount sets the "seller" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetSellerAccount(seller ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(seller).WRITE().SIGNER()
	return inst
}

// GetSellerAccount gets the "seller" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetSellerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSellerSourceTokenAccountAccount sets the "sellerSourceTokenAccount" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetSellerSourceTokenAccountAccount(sellerSourceTokenAccount ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(sellerSourceTokenAccount).WRITE()
	return inst
}

// GetSellerSourceTokenAccountAccount gets the "sellerSourceTokenAccount" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetSellerSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetExchgDepositAuthorityAccount sets the "exchgDepositAuthority" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetExchgDepositAuthorityAccount(exchgDepositAuthority ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(exchgDepositAuthority)
	return inst
}

// GetExchgDepositAuthorityAccount gets the "exchgDepositAuthority" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetExchgDepositAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetExchgDepositAccountAccount sets the "exchgDepositAccount" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetExchgDepositAccountAccount(exchgDepositAccount ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(exchgDepositAccount).WRITE()
	return inst
}

// GetExchgDepositAccountAccount gets the "exchgDepositAccount" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetExchgDepositAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSaleStateAccountAccount sets the "saleStateAccount" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetSaleStateAccountAccount(saleStateAccount ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(saleStateAccount).WRITE().SIGNER()
	return inst
}

// GetSaleStateAccountAccount gets the "saleStateAccount" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetSaleStateAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintKeyAccount sets the "mintKey" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetMintKeyAccount(mintKey ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mintKey).WRITE()
	return inst
}

// GetMintKeyAccount gets the "mintKey" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetMintKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRoyaltyProtectionMarkerAccount sets the "royaltyProtectionMarker" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetRoyaltyProtectionMarkerAccount(royaltyProtectionMarker ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(royaltyProtectionMarker)
	return inst
}

// GetRoyaltyProtectionMarkerAccount gets the "royaltyProtectionMarker" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetRoyaltyProtectionMarkerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCardinalManagerAccount sets the "cardinalManager" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetCardinalManagerAccount(cardinalManager ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(cardinalManager).WRITE()
	return inst
}

// GetCardinalManagerAccount gets the "cardinalManager" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetCardinalManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCardinalManagerTokenAccountAccount sets the "cardinalManagerTokenAccount" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetCardinalManagerTokenAccountAccount(cardinalManagerTokenAccount ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(cardinalManagerTokenAccount).WRITE()
	return inst
}

// GetCardinalManagerTokenAccountAccount gets the "cardinalManagerTokenAccount" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetCardinalManagerTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetEditionPdaAccount sets the "editionPda" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetEditionPdaAccount(editionPda ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(editionPda)
	return inst
}

// GetEditionPdaAccount gets the "editionPda" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetEditionPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetExchangeFeeRecipientAccount sets the "exchangeFeeRecipient" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetExchangeFeeRecipientAccount(exchangeFeeRecipient ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(exchangeFeeRecipient).WRITE()
	return inst
}

// GetExchangeFeeRecipientAccount gets the "exchangeFeeRecipient" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetExchangeFeeRecipientAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetCardinalTokenManagerProgramAccount sets the "cardinalTokenManagerProgram" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(cardinalTokenManagerProgram)
	return inst
}

// GetCardinalTokenManagerProgramAccount gets the "cardinalTokenManagerProgram" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetCardinalTokenManagerProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetRentAccount sets the "rent" account.
func (inst *CreateBuynowRoyaltyProtectedSale) SetRentAccount(rent ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreateBuynowRoyaltyProtectedSale) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst CreateBuynowRoyaltyProtectedSale) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateBuynowRoyaltyProtectedSale,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateBuynowRoyaltyProtectedSale) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateBuynowRoyaltyProtectedSale) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Seller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SellerSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ExchgDepositAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ExchgDepositAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SaleStateAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MintKey is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.RoyaltyProtectionMarker is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CardinalManager is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CardinalManagerTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.EditionPda is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.ExchangeFeeRecipient is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.CardinalTokenManagerProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *CreateBuynowRoyaltyProtectedSale) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateBuynowRoyaltyProtectedSale")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     seller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          sellerSourceToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      exchgDepositAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               exchgDeposit", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                  saleState", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                    mintKey", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    royaltyProtectionMarker", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            cardinalManager", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       cardinalManagerToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                 editionPda", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       exchangeFeeRecipient", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("       tokenMetadataProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("cardinalTokenManagerProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("              systemProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                       rent", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj CreateBuynowRoyaltyProtectedSale) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateBuynowRoyaltyProtectedSale) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateBuynowRoyaltyProtectedSaleInstruction declares a new CreateBuynowRoyaltyProtectedSale instruction with the provided parameters and accounts.
func NewCreateBuynowRoyaltyProtectedSaleInstruction(
	// Parameters:
	data CreateBuyNowSaleIxData,
	// Accounts:
	seller ag_solanago.PublicKey,
	sellerSourceTokenAccount ag_solanago.PublicKey,
	exchgDepositAuthority ag_solanago.PublicKey,
	exchgDepositAccount ag_solanago.PublicKey,
	saleStateAccount ag_solanago.PublicKey,
	mintKey ag_solanago.PublicKey,
	royaltyProtectionMarker ag_solanago.PublicKey,
	cardinalManager ag_solanago.PublicKey,
	cardinalManagerTokenAccount ag_solanago.PublicKey,
	editionPda ag_solanago.PublicKey,
	exchangeFeeRecipient ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	cardinalTokenManagerProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *CreateBuynowRoyaltyProtectedSale {
	return NewCreateBuynowRoyaltyProtectedSaleInstructionBuilder().
		SetData(data).
		SetSellerAccount(seller).
		SetSellerSourceTokenAccountAccount(sellerSourceTokenAccount).
		SetExchgDepositAuthorityAccount(exchgDepositAuthority).
		SetExchgDepositAccountAccount(exchgDepositAccount).
		SetSaleStateAccountAccount(saleStateAccount).
		SetMintKeyAccount(mintKey).
		SetRoyaltyProtectionMarkerAccount(royaltyProtectionMarker).
		SetCardinalManagerAccount(cardinalManager).
		SetCardinalManagerTokenAccountAccount(cardinalManagerTokenAccount).
		SetEditionPdaAccount(editionPda).
		SetExchangeFeeRecipientAccount(exchangeFeeRecipient).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetTokenProgramAccount(tokenProgram).
		SetCardinalTokenManagerProgramAccount(cardinalTokenManagerProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
