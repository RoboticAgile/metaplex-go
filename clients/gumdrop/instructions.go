// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package gumdrop

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_text "github.com/desperatee/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Gumdrop"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_NewDistributor = ag_binary.TypeID([8]byte{32, 139, 112, 171, 0, 2, 225, 155})

	Instruction_CloseDistributorTokenAccount = ag_binary.TypeID([8]byte{156, 174, 153, 120, 102, 150, 134, 142})

	Instruction_CloseDistributor = ag_binary.TypeID([8]byte{202, 56, 180, 143, 46, 104, 106, 112})

	Instruction_ProveClaim = ag_binary.TypeID([8]byte{52, 82, 123, 224, 40, 139, 230, 184})

	Instruction_Claim = ag_binary.TypeID([8]byte{62, 198, 214, 193, 213, 159, 108, 210})

	Instruction_ClaimCandy = ag_binary.TypeID([8]byte{87, 176, 177, 90, 136, 95, 83, 242})

	Instruction_ClaimEdition = ag_binary.TypeID([8]byte{150, 83, 124, 180, 53, 35, 144, 248})

	Instruction_ClaimCandyProven = ag_binary.TypeID([8]byte{1, 2, 30, 252, 145, 228, 67, 145})

	Instruction_RecoverUpdateAuthority = ag_binary.TypeID([8]byte{142, 251, 209, 116, 87, 100, 36, 191})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_NewDistributor:
		return "NewDistributor"
	case Instruction_CloseDistributorTokenAccount:
		return "CloseDistributorTokenAccount"
	case Instruction_CloseDistributor:
		return "CloseDistributor"
	case Instruction_ProveClaim:
		return "ProveClaim"
	case Instruction_Claim:
		return "Claim"
	case Instruction_ClaimCandy:
		return "ClaimCandy"
	case Instruction_ClaimEdition:
		return "ClaimEdition"
	case Instruction_ClaimCandyProven:
		return "ClaimCandyProven"
	case Instruction_RecoverUpdateAuthority:
		return "RecoverUpdateAuthority"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"new_distributor", (*NewDistributor)(nil),
		},
		{
			"close_distributor_token_account", (*CloseDistributorTokenAccount)(nil),
		},
		{
			"close_distributor", (*CloseDistributor)(nil),
		},
		{
			"prove_claim", (*ProveClaim)(nil),
		},
		{
			"claim", (*Claim)(nil),
		},
		{
			"claim_candy", (*ClaimCandy)(nil),
		},
		{
			"claim_edition", (*ClaimEdition)(nil),
		},
		{
			"claim_candy_proven", (*ClaimCandyProven)(nil),
		},
		{
			"recover_update_authority", (*RecoverUpdateAuthority)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
