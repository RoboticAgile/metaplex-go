// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package gumdrop

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClaimCandy is the `claimCandy` instruction.
type ClaimCandy struct {
	WalletBump     *uint8
	ClaimBump      *uint8
	Index          *uint64
	Amount         *uint64
	ClaimantSecret *ag_solanago.PublicKey
	Proof          *[][32]uint8

	// [0] = [WRITE] distributor
	//
	// [1] = [WRITE] distributorWallet
	//
	// [2] = [WRITE] claimCount
	//
	// [3] = [SIGNER] temporal
	//
	// [4] = [SIGNER] payer
	//
	// [5] = [] candyMachineConfig
	//
	// [6] = [WRITE] candyMachine
	//
	// [7] = [WRITE] candyMachineWallet
	//
	// [8] = [WRITE] candyMachineMint
	//
	// [9] = [WRITE] candyMachineMetadata
	//
	// [10] = [WRITE] candyMachineMasterEdition
	//
	// [11] = [] systemProgram
	//
	// [12] = [] tokenProgram
	//
	// [13] = [] tokenMetadataProgram
	//
	// [14] = [] candyMachineProgram
	//
	// [15] = [] rent
	//
	// [16] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimCandyInstructionBuilder creates a new `ClaimCandy` instruction builder.
func NewClaimCandyInstructionBuilder() *ClaimCandy {
	nd := &ClaimCandy{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetWalletBump sets the "walletBump" parameter.
func (inst *ClaimCandy) SetWalletBump(walletBump uint8) *ClaimCandy {
	inst.WalletBump = &walletBump
	return inst
}

// SetClaimBump sets the "claimBump" parameter.
func (inst *ClaimCandy) SetClaimBump(claimBump uint8) *ClaimCandy {
	inst.ClaimBump = &claimBump
	return inst
}

// SetIndex sets the "index" parameter.
func (inst *ClaimCandy) SetIndex(index uint64) *ClaimCandy {
	inst.Index = &index
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *ClaimCandy) SetAmount(amount uint64) *ClaimCandy {
	inst.Amount = &amount
	return inst
}

// SetClaimantSecret sets the "claimantSecret" parameter.
func (inst *ClaimCandy) SetClaimantSecret(claimantSecret ag_solanago.PublicKey) *ClaimCandy {
	inst.ClaimantSecret = &claimantSecret
	return inst
}

// SetProof sets the "proof" parameter.
func (inst *ClaimCandy) SetProof(proof [][32]uint8) *ClaimCandy {
	inst.Proof = &proof
	return inst
}

// SetDistributorAccount sets the "distributor" account.
func (inst *ClaimCandy) SetDistributorAccount(distributor ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(distributor).WRITE()
	return inst
}

// GetDistributorAccount gets the "distributor" account.
func (inst *ClaimCandy) GetDistributorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDistributorWalletAccount sets the "distributorWallet" account.
func (inst *ClaimCandy) SetDistributorWalletAccount(distributorWallet ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(distributorWallet).WRITE()
	return inst
}

// GetDistributorWalletAccount gets the "distributorWallet" account.
func (inst *ClaimCandy) GetDistributorWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetClaimCountAccount sets the "claimCount" account.
func (inst *ClaimCandy) SetClaimCountAccount(claimCount ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(claimCount).WRITE()
	return inst
}

// GetClaimCountAccount gets the "claimCount" account.
func (inst *ClaimCandy) GetClaimCountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTemporalAccount sets the "temporal" account.
func (inst *ClaimCandy) SetTemporalAccount(temporal ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(temporal).SIGNER()
	return inst
}

// GetTemporalAccount gets the "temporal" account.
func (inst *ClaimCandy) GetTemporalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *ClaimCandy) SetPayerAccount(payer ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *ClaimCandy) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCandyMachineConfigAccount sets the "candyMachineConfig" account.
func (inst *ClaimCandy) SetCandyMachineConfigAccount(candyMachineConfig ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(candyMachineConfig)
	return inst
}

// GetCandyMachineConfigAccount gets the "candyMachineConfig" account.
func (inst *ClaimCandy) GetCandyMachineConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *ClaimCandy) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *ClaimCandy) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCandyMachineWalletAccount sets the "candyMachineWallet" account.
func (inst *ClaimCandy) SetCandyMachineWalletAccount(candyMachineWallet ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(candyMachineWallet).WRITE()
	return inst
}

// GetCandyMachineWalletAccount gets the "candyMachineWallet" account.
func (inst *ClaimCandy) GetCandyMachineWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCandyMachineMintAccount sets the "candyMachineMint" account.
func (inst *ClaimCandy) SetCandyMachineMintAccount(candyMachineMint ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(candyMachineMint).WRITE()
	return inst
}

// GetCandyMachineMintAccount gets the "candyMachineMint" account.
func (inst *ClaimCandy) GetCandyMachineMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetCandyMachineMetadataAccount sets the "candyMachineMetadata" account.
func (inst *ClaimCandy) SetCandyMachineMetadataAccount(candyMachineMetadata ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(candyMachineMetadata).WRITE()
	return inst
}

// GetCandyMachineMetadataAccount gets the "candyMachineMetadata" account.
func (inst *ClaimCandy) GetCandyMachineMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetCandyMachineMasterEditionAccount sets the "candyMachineMasterEdition" account.
func (inst *ClaimCandy) SetCandyMachineMasterEditionAccount(candyMachineMasterEdition ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(candyMachineMasterEdition).WRITE()
	return inst
}

// GetCandyMachineMasterEditionAccount gets the "candyMachineMasterEdition" account.
func (inst *ClaimCandy) GetCandyMachineMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ClaimCandy) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ClaimCandy) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ClaimCandy) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ClaimCandy) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *ClaimCandy) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *ClaimCandy) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetCandyMachineProgramAccount sets the "candyMachineProgram" account.
func (inst *ClaimCandy) SetCandyMachineProgramAccount(candyMachineProgram ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(candyMachineProgram)
	return inst
}

// GetCandyMachineProgramAccount gets the "candyMachineProgram" account.
func (inst *ClaimCandy) GetCandyMachineProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetRentAccount sets the "rent" account.
func (inst *ClaimCandy) SetRentAccount(rent ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *ClaimCandy) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetClockAccount sets the "clock" account.
func (inst *ClaimCandy) SetClockAccount(clock ag_solanago.PublicKey) *ClaimCandy {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *ClaimCandy) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst ClaimCandy) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClaimCandy,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClaimCandy) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClaimCandy) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.WalletBump == nil {
			return errors.New("WalletBump parameter is not set")
		}
		if inst.ClaimBump == nil {
			return errors.New("ClaimBump parameter is not set")
		}
		if inst.Index == nil {
			return errors.New("Index parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.ClaimantSecret == nil {
			return errors.New("ClaimantSecret parameter is not set")
		}
		if inst.Proof == nil {
			return errors.New("Proof parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Distributor is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.DistributorWallet is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ClaimCount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Temporal is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CandyMachineConfig is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CandyMachineWallet is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CandyMachineMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CandyMachineMetadata is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CandyMachineMasterEdition is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.CandyMachineProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *ClaimCandy) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClaimCandy")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    WalletBump", *inst.WalletBump))
						paramsBranch.Child(ag_format.Param("     ClaimBump", *inst.ClaimBump))
						paramsBranch.Child(ag_format.Param("         Index", *inst.Index))
						paramsBranch.Child(ag_format.Param("        Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("ClaimantSecret", *inst.ClaimantSecret))
						paramsBranch.Child(ag_format.Param("         Proof", *inst.Proof))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              distributor", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        distributorWallet", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               claimCount", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 temporal", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       candyMachineConfig", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             candyMachine", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       candyMachineWallet", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         candyMachineMint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("     candyMachineMetadata", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("candyMachineMasterEdition", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("             tokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("     tokenMetadataProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("      candyMachineProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                     rent", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("                    clock", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj ClaimCandy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WalletBump` param:
	err = encoder.Encode(obj.WalletBump)
	if err != nil {
		return err
	}
	// Serialize `ClaimBump` param:
	err = encoder.Encode(obj.ClaimBump)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ClaimantSecret` param:
	err = encoder.Encode(obj.ClaimantSecret)
	if err != nil {
		return err
	}
	// Serialize `Proof` param:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ClaimCandy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WalletBump`:
	err = decoder.Decode(&obj.WalletBump)
	if err != nil {
		return err
	}
	// Deserialize `ClaimBump`:
	err = decoder.Decode(&obj.ClaimBump)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimantSecret`:
	err = decoder.Decode(&obj.ClaimantSecret)
	if err != nil {
		return err
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimCandyInstruction declares a new ClaimCandy instruction with the provided parameters and accounts.
func NewClaimCandyInstruction(
	// Parameters:
	walletBump uint8,
	claimBump uint8,
	index uint64,
	amount uint64,
	claimantSecret ag_solanago.PublicKey,
	proof [][32]uint8,
	// Accounts:
	distributor ag_solanago.PublicKey,
	distributorWallet ag_solanago.PublicKey,
	claimCount ag_solanago.PublicKey,
	temporal ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	candyMachineConfig ag_solanago.PublicKey,
	candyMachine ag_solanago.PublicKey,
	candyMachineWallet ag_solanago.PublicKey,
	candyMachineMint ag_solanago.PublicKey,
	candyMachineMetadata ag_solanago.PublicKey,
	candyMachineMasterEdition ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	candyMachineProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *ClaimCandy {
	return NewClaimCandyInstructionBuilder().
		SetWalletBump(walletBump).
		SetClaimBump(claimBump).
		SetIndex(index).
		SetAmount(amount).
		SetClaimantSecret(claimantSecret).
		SetProof(proof).
		SetDistributorAccount(distributor).
		SetDistributorWalletAccount(distributorWallet).
		SetClaimCountAccount(claimCount).
		SetTemporalAccount(temporal).
		SetPayerAccount(payer).
		SetCandyMachineConfigAccount(candyMachineConfig).
		SetCandyMachineAccount(candyMachine).
		SetCandyMachineWalletAccount(candyMachineWallet).
		SetCandyMachineMintAccount(candyMachineMint).
		SetCandyMachineMetadataAccount(candyMachineMetadata).
		SetCandyMachineMasterEditionAccount(candyMachineMasterEdition).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetCandyMachineProgramAccount(candyMachineProgram).
		SetRentAccount(rent).
		SetClockAccount(clock)
}
