// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package gumdrop

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseDistributorTokenAccount is the `closeDistributorTokenAccount` instruction.
type CloseDistributorTokenAccount struct {
	Bump *uint8

	// [0] = [SIGNER] base
	//
	// [1] = [] distributor
	//
	// [2] = [WRITE] from
	//
	// [3] = [WRITE] to
	//
	// [4] = [WRITE] receiver
	//
	// [5] = [] systemProgram
	//
	// [6] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseDistributorTokenAccountInstructionBuilder creates a new `CloseDistributorTokenAccount` instruction builder.
func NewCloseDistributorTokenAccountInstructionBuilder() *CloseDistributorTokenAccount {
	nd := &CloseDistributorTokenAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *CloseDistributorTokenAccount) SetBump(bump uint8) *CloseDistributorTokenAccount {
	inst.Bump = &bump
	return inst
}

// SetBaseAccount sets the "base" account.
func (inst *CloseDistributorTokenAccount) SetBaseAccount(base ag_solanago.PublicKey) *CloseDistributorTokenAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(base).SIGNER()
	return inst
}

// GetBaseAccount gets the "base" account.
func (inst *CloseDistributorTokenAccount) GetBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDistributorAccount sets the "distributor" account.
func (inst *CloseDistributorTokenAccount) SetDistributorAccount(distributor ag_solanago.PublicKey) *CloseDistributorTokenAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(distributor)
	return inst
}

// GetDistributorAccount gets the "distributor" account.
func (inst *CloseDistributorTokenAccount) GetDistributorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFromAccount sets the "from" account.
func (inst *CloseDistributorTokenAccount) SetFromAccount(from ag_solanago.PublicKey) *CloseDistributorTokenAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(from).WRITE()
	return inst
}

// GetFromAccount gets the "from" account.
func (inst *CloseDistributorTokenAccount) GetFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetToAccount sets the "to" account.
func (inst *CloseDistributorTokenAccount) SetToAccount(to ag_solanago.PublicKey) *CloseDistributorTokenAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(to).WRITE()
	return inst
}

// GetToAccount gets the "to" account.
func (inst *CloseDistributorTokenAccount) GetToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *CloseDistributorTokenAccount) SetReceiverAccount(receiver ag_solanago.PublicKey) *CloseDistributorTokenAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(receiver).WRITE()
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *CloseDistributorTokenAccount) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CloseDistributorTokenAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CloseDistributorTokenAccount {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CloseDistributorTokenAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CloseDistributorTokenAccount) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CloseDistributorTokenAccount {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CloseDistributorTokenAccount) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst CloseDistributorTokenAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseDistributorTokenAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseDistributorTokenAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseDistributorTokenAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Base is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Distributor is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.From is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.To is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Receiver is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CloseDistributorTokenAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseDistributorTokenAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Bump", *inst.Bump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         base", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  distributor", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         from", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           to", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     receiver", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj CloseDistributorTokenAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CloseDistributorTokenAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

// NewCloseDistributorTokenAccountInstruction declares a new CloseDistributorTokenAccount instruction with the provided parameters and accounts.
func NewCloseDistributorTokenAccountInstruction(
	// Parameters:
	bump uint8,
	// Accounts:
	base ag_solanago.PublicKey,
	distributor ag_solanago.PublicKey,
	from ag_solanago.PublicKey,
	to ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CloseDistributorTokenAccount {
	return NewCloseDistributorTokenAccountInstructionBuilder().
		SetBump(bump).
		SetBaseAccount(base).
		SetDistributorAccount(distributor).
		SetFromAccount(from).
		SetToAccount(to).
		SetReceiverAccount(receiver).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram)
}
