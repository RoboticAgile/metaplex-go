// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package gumdrop

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// NewDistributor is the `newDistributor` instruction.
type NewDistributor struct {
	Bump     *uint8
	Root     *[32]uint8
	Temporal *ag_solanago.PublicKey

	// [0] = [SIGNER] base
	//
	// [1] = [WRITE] distributor
	//
	// [2] = [WRITE, SIGNER] payer
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewNewDistributorInstructionBuilder creates a new `NewDistributor` instruction builder.
func NewNewDistributorInstructionBuilder() *NewDistributor {
	nd := &NewDistributor{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *NewDistributor) SetBump(bump uint8) *NewDistributor {
	inst.Bump = &bump
	return inst
}

// SetRoot sets the "root" parameter.
func (inst *NewDistributor) SetRoot(root [32]uint8) *NewDistributor {
	inst.Root = &root
	return inst
}

// SetTemporal sets the "temporal" parameter.
func (inst *NewDistributor) SetTemporal(temporal ag_solanago.PublicKey) *NewDistributor {
	inst.Temporal = &temporal
	return inst
}

// SetBaseAccount sets the "base" account.
func (inst *NewDistributor) SetBaseAccount(base ag_solanago.PublicKey) *NewDistributor {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(base).SIGNER()
	return inst
}

// GetBaseAccount gets the "base" account.
func (inst *NewDistributor) GetBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDistributorAccount sets the "distributor" account.
func (inst *NewDistributor) SetDistributorAccount(distributor ag_solanago.PublicKey) *NewDistributor {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(distributor).WRITE()
	return inst
}

// GetDistributorAccount gets the "distributor" account.
func (inst *NewDistributor) GetDistributorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
func (inst *NewDistributor) SetPayerAccount(payer ag_solanago.PublicKey) *NewDistributor {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *NewDistributor) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *NewDistributor) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *NewDistributor {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *NewDistributor) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst NewDistributor) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_NewDistributor,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst NewDistributor) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *NewDistributor) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.Root == nil {
			return errors.New("Root parameter is not set")
		}
		if inst.Temporal == nil {
			return errors.New("Temporal parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Base is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Distributor is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *NewDistributor) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("NewDistributor")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("    Root", *inst.Root))
						paramsBranch.Child(ag_format.Param("Temporal", *inst.Temporal))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         base", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  distributor", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj NewDistributor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Root` param:
	err = encoder.Encode(obj.Root)
	if err != nil {
		return err
	}
	// Serialize `Temporal` param:
	err = encoder.Encode(obj.Temporal)
	if err != nil {
		return err
	}
	return nil
}
func (obj *NewDistributor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Root`:
	err = decoder.Decode(&obj.Root)
	if err != nil {
		return err
	}
	// Deserialize `Temporal`:
	err = decoder.Decode(&obj.Temporal)
	if err != nil {
		return err
	}
	return nil
}

// NewNewDistributorInstruction declares a new NewDistributor instruction with the provided parameters and accounts.
func NewNewDistributorInstruction(
	// Parameters:
	bump uint8,
	root [32]uint8,
	temporal ag_solanago.PublicKey,
	// Accounts:
	base ag_solanago.PublicKey,
	distributor ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *NewDistributor {
	return NewNewDistributorInstructionBuilder().
		SetBump(bump).
		SetRoot(root).
		SetTemporal(temporal).
		SetBaseAccount(base).
		SetDistributorAccount(distributor).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
