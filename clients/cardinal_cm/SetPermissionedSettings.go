// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package candy_machine

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetPermissionedSettings is the `setPermissionedSettings` instruction.
type SetPermissionedSettings struct {
	Creator           *ag_solanago.PublicKey
	TransferAuthority *ag_solanago.PublicKey `bin:"optional"`

	// [0] = [WRITE] candyMachine
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [WRITE] permissionedSettings
	//
	// [3] = [WRITE, SIGNER] payer
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetPermissionedSettingsInstructionBuilder creates a new `SetPermissionedSettings` instruction builder.
func NewSetPermissionedSettingsInstructionBuilder() *SetPermissionedSettings {
	nd := &SetPermissionedSettings{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetCreator sets the "creator" parameter.
func (inst *SetPermissionedSettings) SetCreator(creator ag_solanago.PublicKey) *SetPermissionedSettings {
	inst.Creator = &creator
	return inst
}

// SetTransferAuthority sets the "transferAuthority" parameter.
func (inst *SetPermissionedSettings) SetTransferAuthority(transferAuthority ag_solanago.PublicKey) *SetPermissionedSettings {
	inst.TransferAuthority = &transferAuthority
	return inst
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *SetPermissionedSettings) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *SetPermissionedSettings {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *SetPermissionedSettings) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SetPermissionedSettings) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetPermissionedSettings {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SetPermissionedSettings) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPermissionedSettingsAccount sets the "permissionedSettings" account.
func (inst *SetPermissionedSettings) SetPermissionedSettingsAccount(permissionedSettings ag_solanago.PublicKey) *SetPermissionedSettings {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(permissionedSettings).WRITE()
	return inst
}

// GetPermissionedSettingsAccount gets the "permissionedSettings" account.
func (inst *SetPermissionedSettings) GetPermissionedSettingsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *SetPermissionedSettings) SetPayerAccount(payer ag_solanago.PublicKey) *SetPermissionedSettings {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *SetPermissionedSettings) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *SetPermissionedSettings) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SetPermissionedSettings {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *SetPermissionedSettings) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst SetPermissionedSettings) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetPermissionedSettings,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetPermissionedSettings) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetPermissionedSettings) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Creator == nil {
			return errors.New("Creator parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PermissionedSettings is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *SetPermissionedSettings) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetPermissionedSettings")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          Creator", *inst.Creator))
						paramsBranch.Child(ag_format.Param("TransferAuthority (OPT)", inst.TransferAuthority))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("permissionedSettings", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj SetPermissionedSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `TransferAuthority` param (optional):
	{
		if obj.TransferAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TransferAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *SetPermissionedSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `TransferAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TransferAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewSetPermissionedSettingsInstruction declares a new SetPermissionedSettings instruction with the provided parameters and accounts.
func NewSetPermissionedSettingsInstruction(
	// Parameters:
	creator ag_solanago.PublicKey,
	transferAuthority ag_solanago.PublicKey,
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	permissionedSettings ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *SetPermissionedSettings {
	return NewSetPermissionedSettingsInstructionBuilder().
		SetCreator(creator).
		SetTransferAuthority(transferAuthority).
		SetCandyMachineAccount(candyMachine).
		SetAuthorityAccount(authority).
		SetPermissionedSettingsAccount(permissionedSettings).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
