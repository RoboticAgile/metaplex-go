// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package candy_machine

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetLockupSettings is the `setLockupSettings` instruction.
type SetLockupSettings struct {
	LockupType *uint8
	Number     *int64

	// [0] = [WRITE] candyMachine
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [WRITE] lockupSettings
	//
	// [3] = [WRITE, SIGNER] payer
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetLockupSettingsInstructionBuilder creates a new `SetLockupSettings` instruction builder.
func NewSetLockupSettingsInstructionBuilder() *SetLockupSettings {
	nd := &SetLockupSettings{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetLockupType sets the "lockupType" parameter.
func (inst *SetLockupSettings) SetLockupType(lockupType uint8) *SetLockupSettings {
	inst.LockupType = &lockupType
	return inst
}

// SetNumber sets the "number" parameter.
func (inst *SetLockupSettings) SetNumber(number int64) *SetLockupSettings {
	inst.Number = &number
	return inst
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *SetLockupSettings) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *SetLockupSettings {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *SetLockupSettings) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SetLockupSettings) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetLockupSettings {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SetLockupSettings) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLockupSettingsAccount sets the "lockupSettings" account.
func (inst *SetLockupSettings) SetLockupSettingsAccount(lockupSettings ag_solanago.PublicKey) *SetLockupSettings {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(lockupSettings).WRITE()
	return inst
}

// GetLockupSettingsAccount gets the "lockupSettings" account.
func (inst *SetLockupSettings) GetLockupSettingsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *SetLockupSettings) SetPayerAccount(payer ag_solanago.PublicKey) *SetLockupSettings {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *SetLockupSettings) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *SetLockupSettings) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SetLockupSettings {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *SetLockupSettings) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst SetLockupSettings) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetLockupSettings,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetLockupSettings) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetLockupSettings) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LockupType == nil {
			return errors.New("LockupType parameter is not set")
		}
		if inst.Number == nil {
			return errors.New("Number parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LockupSettings is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *SetLockupSettings) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetLockupSettings")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("LockupType", *inst.LockupType))
						paramsBranch.Child(ag_format.Param("    Number", *inst.Number))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("lockupSettings", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj SetLockupSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LockupType` param:
	err = encoder.Encode(obj.LockupType)
	if err != nil {
		return err
	}
	// Serialize `Number` param:
	err = encoder.Encode(obj.Number)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetLockupSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LockupType`:
	err = decoder.Decode(&obj.LockupType)
	if err != nil {
		return err
	}
	// Deserialize `Number`:
	err = decoder.Decode(&obj.Number)
	if err != nil {
		return err
	}
	return nil
}

// NewSetLockupSettingsInstruction declares a new SetLockupSettings instruction with the provided parameters and accounts.
func NewSetLockupSettingsInstruction(
	// Parameters:
	lockupType uint8,
	number int64,
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	lockupSettings ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *SetLockupSettings {
	return NewSetLockupSettingsInstructionBuilder().
		SetLockupType(lockupType).
		SetNumber(number).
		SetCandyMachineAccount(candyMachine).
		SetAuthorityAccount(authority).
		SetLockupSettingsAccount(lockupSettings).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
