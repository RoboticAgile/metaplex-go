// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package auction_house

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AuctioneerCancel is the `auctioneerCancel` instruction.
type AuctioneerCancel struct {
	BuyerPrice *uint64
	TokenSize  *uint64

	// [0] = [WRITE] wallet
	//
	// [1] = [WRITE] tokenAccount
	//
	// [2] = [] tokenMint
	//
	// [3] = [] authority
	//
	// [4] = [SIGNER] auctioneerAuthority
	//
	// [5] = [] auctionHouse
	//
	// [6] = [WRITE] auctionHouseFeeAccount
	//
	// [7] = [WRITE] tradeState
	//
	// [8] = [] ahAuctioneerPda
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAuctioneerCancelInstructionBuilder creates a new `AuctioneerCancel` instruction builder.
func NewAuctioneerCancelInstructionBuilder() *AuctioneerCancel {
	nd := &AuctioneerCancel{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetBuyerPrice sets the "buyerPrice" parameter.
func (inst *AuctioneerCancel) SetBuyerPrice(buyerPrice uint64) *AuctioneerCancel {
	inst.BuyerPrice = &buyerPrice
	return inst
}

// SetTokenSize sets the "tokenSize" parameter.
func (inst *AuctioneerCancel) SetTokenSize(tokenSize uint64) *AuctioneerCancel {
	inst.TokenSize = &tokenSize
	return inst
}

// SetWalletAccount sets the "wallet" account.
func (inst *AuctioneerCancel) SetWalletAccount(wallet ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(wallet).WRITE()
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *AuctioneerCancel) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenAccountAccount sets the "tokenAccount" account.
func (inst *AuctioneerCancel) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
func (inst *AuctioneerCancel) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *AuctioneerCancel) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *AuctioneerCancel) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *AuctioneerCancel) SetAuthorityAccount(authority ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *AuctioneerCancel) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuctioneerAuthorityAccount sets the "auctioneerAuthority" account.
func (inst *AuctioneerCancel) SetAuctioneerAuthorityAccount(auctioneerAuthority ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(auctioneerAuthority).SIGNER()
	return inst
}

// GetAuctioneerAuthorityAccount gets the "auctioneerAuthority" account.
func (inst *AuctioneerCancel) GetAuctioneerAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAuctionHouseAccount sets the "auctionHouse" account.
func (inst *AuctioneerCancel) SetAuctionHouseAccount(auctionHouse ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(auctionHouse)
	return inst
}

// GetAuctionHouseAccount gets the "auctionHouse" account.
func (inst *AuctioneerCancel) GetAuctionHouseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuctionHouseFeeAccountAccount sets the "auctionHouseFeeAccount" account.
func (inst *AuctioneerCancel) SetAuctionHouseFeeAccountAccount(auctionHouseFeeAccount ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(auctionHouseFeeAccount).WRITE()
	return inst
}

// GetAuctionHouseFeeAccountAccount gets the "auctionHouseFeeAccount" account.
func (inst *AuctioneerCancel) GetAuctionHouseFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTradeStateAccount sets the "tradeState" account.
func (inst *AuctioneerCancel) SetTradeStateAccount(tradeState ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tradeState).WRITE()
	return inst
}

// GetTradeStateAccount gets the "tradeState" account.
func (inst *AuctioneerCancel) GetTradeStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAhAuctioneerPdaAccount sets the "ahAuctioneerPda" account.
func (inst *AuctioneerCancel) SetAhAuctioneerPdaAccount(ahAuctioneerPda ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(ahAuctioneerPda)
	return inst
}

// GetAhAuctioneerPdaAccount gets the "ahAuctioneerPda" account.
func (inst *AuctioneerCancel) GetAhAuctioneerPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AuctioneerCancel) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AuctioneerCancel {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AuctioneerCancel) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst AuctioneerCancel) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AuctioneerCancel,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AuctioneerCancel) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AuctioneerCancel) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BuyerPrice == nil {
			return errors.New("BuyerPrice parameter is not set")
		}
		if inst.TokenSize == nil {
			return errors.New("TokenSize parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AuctioneerAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AuctionHouse is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AuctionHouseFeeAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TradeState is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AhAuctioneerPda is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *AuctioneerCancel) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AuctioneerCancel")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("BuyerPrice", *inst.BuyerPrice))
						paramsBranch.Child(ag_format.Param(" TokenSize", *inst.TokenSize))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             wallet", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              token", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          tokenMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("auctioneerAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       auctionHouse", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    auctionHouseFee", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         tradeState", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    ahAuctioneerPda", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       tokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj AuctioneerCancel) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BuyerPrice` param:
	err = encoder.Encode(obj.BuyerPrice)
	if err != nil {
		return err
	}
	// Serialize `TokenSize` param:
	err = encoder.Encode(obj.TokenSize)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AuctioneerCancel) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BuyerPrice`:
	err = decoder.Decode(&obj.BuyerPrice)
	if err != nil {
		return err
	}
	// Deserialize `TokenSize`:
	err = decoder.Decode(&obj.TokenSize)
	if err != nil {
		return err
	}
	return nil
}

// NewAuctioneerCancelInstruction declares a new AuctioneerCancel instruction with the provided parameters and accounts.
func NewAuctioneerCancelInstruction(
	// Parameters:
	buyerPrice uint64,
	tokenSize uint64,
	// Accounts:
	wallet ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	auctioneerAuthority ag_solanago.PublicKey,
	auctionHouse ag_solanago.PublicKey,
	auctionHouseFeeAccount ag_solanago.PublicKey,
	tradeState ag_solanago.PublicKey,
	ahAuctioneerPda ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *AuctioneerCancel {
	return NewAuctioneerCancelInstructionBuilder().
		SetBuyerPrice(buyerPrice).
		SetTokenSize(tokenSize).
		SetWalletAccount(wallet).
		SetTokenAccountAccount(tokenAccount).
		SetTokenMintAccount(tokenMint).
		SetAuthorityAccount(authority).
		SetAuctioneerAuthorityAccount(auctioneerAuthority).
		SetAuctionHouseAccount(auctionHouse).
		SetAuctionHouseFeeAccountAccount(auctionHouseFeeAccount).
		SetTradeStateAccount(tradeState).
		SetAhAuctioneerPdaAccount(ahAuctioneerPda).
		SetTokenProgramAccount(tokenProgram)
}
