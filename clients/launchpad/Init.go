// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Init is the `init` instruction.
type Init struct {
	Params *InitLaunchpadCollectionParams

	// [0] = [WRITE, SIGNER] launchpadManager
	//
	// [1] = [WRITE] collection
	//
	// [2] = [WRITE] collectionMint
	//
	// [3] = [WRITE] collectionMintTa
	//
	// [4] = [WRITE] collectionMetadata
	//
	// [5] = [WRITE] collectionMasterEdition
	//
	// [6] = [] mplTokenMetadata
	//
	// [7] = [] associatedTokenProgram
	//
	// [8] = [] tokenProgram
	//
	// [9] = [] systemProgram
	//
	// [10] = [] rent
	//
	// [11] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitInstructionBuilder creates a new `Init` instruction builder.
func NewInitInstructionBuilder() *Init {
	nd := &Init{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *Init) SetParams(params InitLaunchpadCollectionParams) *Init {
	inst.Params = &params
	return inst
}

// SetLaunchpadManagerAccount sets the "launchpadManager" account.
func (inst *Init) SetLaunchpadManagerAccount(launchpadManager ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(launchpadManager).WRITE().SIGNER()
	return inst
}

// GetLaunchpadManagerAccount gets the "launchpadManager" account.
func (inst *Init) GetLaunchpadManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCollectionAccount sets the "collection" account.
func (inst *Init) SetCollectionAccount(collection ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(collection).WRITE()
	return inst
}

// GetCollectionAccount gets the "collection" account.
func (inst *Init) GetCollectionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCollectionMintAccount sets the "collectionMint" account.
func (inst *Init) SetCollectionMintAccount(collectionMint ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(collectionMint).WRITE()
	return inst
}

// GetCollectionMintAccount gets the "collectionMint" account.
func (inst *Init) GetCollectionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCollectionMintTaAccount sets the "collectionMintTa" account.
func (inst *Init) SetCollectionMintTaAccount(collectionMintTa ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(collectionMintTa).WRITE()
	return inst
}

// GetCollectionMintTaAccount gets the "collectionMintTa" account.
func (inst *Init) GetCollectionMintTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
func (inst *Init) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(collectionMetadata).WRITE()
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
func (inst *Init) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCollectionMasterEditionAccount sets the "collectionMasterEdition" account.
func (inst *Init) SetCollectionMasterEditionAccount(collectionMasterEdition ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(collectionMasterEdition).WRITE()
	return inst
}

// GetCollectionMasterEditionAccount gets the "collectionMasterEdition" account.
func (inst *Init) GetCollectionMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMplTokenMetadataAccount sets the "mplTokenMetadata" account.
func (inst *Init) SetMplTokenMetadataAccount(mplTokenMetadata ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(mplTokenMetadata)
	return inst
}

// GetMplTokenMetadataAccount gets the "mplTokenMetadata" account.
func (inst *Init) GetMplTokenMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *Init) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *Init) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Init) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Init) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Init) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Init) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetRentAccount sets the "rent" account.
func (inst *Init) SetRentAccount(rent ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *Init) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetClockAccount sets the "clock" account.
func (inst *Init) SetClockAccount(clock ag_solanago.PublicKey) *Init {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *Init) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst Init) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Init,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Init) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Init) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LaunchpadManager is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Collection is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CollectionMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CollectionMintTa is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CollectionMasterEdition is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MplTokenMetadata is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *Init) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Init")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       launchpadManager", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             collection", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         collectionMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       collectionMintTa", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     collectionMetadata", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("collectionMasterEdition", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       mplTokenMetadata", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta(" associatedTokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          systemProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                   rent", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                  clock", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj Init) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Init) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewInitInstruction declares a new Init instruction with the provided parameters and accounts.
func NewInitInstruction(
	// Parameters:
	params InitLaunchpadCollectionParams,
	// Accounts:
	launchpadManager ag_solanago.PublicKey,
	collection ag_solanago.PublicKey,
	collectionMint ag_solanago.PublicKey,
	collectionMintTa ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey,
	collectionMasterEdition ag_solanago.PublicKey,
	mplTokenMetadata ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *Init {
	return NewInitInstructionBuilder().
		SetParams(params).
		SetLaunchpadManagerAccount(launchpadManager).
		SetCollectionAccount(collection).
		SetCollectionMintAccount(collectionMint).
		SetCollectionMintTaAccount(collectionMintTa).
		SetCollectionMetadataAccount(collectionMetadata).
		SetCollectionMasterEditionAccount(collectionMasterEdition).
		SetMplTokenMetadataAccount(mplTokenMetadata).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetClockAccount(clock)
}
