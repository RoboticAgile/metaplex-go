// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package launchpad

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_text "github.com/desperatee/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Launchpad"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_Init = ag_binary.TypeID([8]byte{220, 59, 207, 236, 108, 250, 47, 100})

	Instruction_RedeemFunds = ag_binary.TypeID([8]byte{56, 138, 161, 151, 161, 194, 105, 182})

	Instruction_PreMint = ag_binary.TypeID([8]byte{128, 218, 2, 216, 241, 28, 93, 200})

	Instruction_TransferAuthority = ag_binary.TypeID([8]byte{48, 169, 76, 72, 229, 180, 55, 161})

	Instruction_Unfreeze = ag_binary.TypeID([8]byte{133, 160, 68, 253, 80, 232, 218, 247})

	Instruction_UpdateMetadata = ag_binary.TypeID([8]byte{170, 182, 43, 239, 97, 78, 225, 186})

	Instruction_BuyTicket = ag_binary.TypeID([8]byte{11, 24, 17, 193, 168, 116, 164, 169})

	Instruction_CheckTicket = ag_binary.TypeID([8]byte{140, 97, 78, 139, 166, 219, 170, 77})

	Instruction_RedeemTicket = ag_binary.TypeID([8]byte{129, 120, 104, 224, 155, 25, 22, 192})

	Instruction_FixedRedeemTicket = ag_binary.TypeID([8]byte{164, 106, 189, 103, 187, 247, 167, 34})

	Instruction_InitStage = ag_binary.TypeID([8]byte{80, 93, 28, 95, 62, 176, 1, 218})

	Instruction_UpdateStage = ag_binary.TypeID([8]byte{159, 10, 194, 3, 171, 184, 44, 218})

	Instruction_RedeemPfp = ag_binary.TypeID([8]byte{130, 253, 51, 12, 0, 138, 143, 204})

	Instruction_RedeemLegendary = ag_binary.TypeID([8]byte{130, 5, 80, 207, 91, 10, 55, 22})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Init:
		return "Init"
	case Instruction_RedeemFunds:
		return "RedeemFunds"
	case Instruction_PreMint:
		return "PreMint"
	case Instruction_TransferAuthority:
		return "TransferAuthority"
	case Instruction_Unfreeze:
		return "Unfreeze"
	case Instruction_UpdateMetadata:
		return "UpdateMetadata"
	case Instruction_BuyTicket:
		return "BuyTicket"
	case Instruction_CheckTicket:
		return "CheckTicket"
	case Instruction_RedeemTicket:
		return "RedeemTicket"
	case Instruction_FixedRedeemTicket:
		return "FixedRedeemTicket"
	case Instruction_InitStage:
		return "InitStage"
	case Instruction_UpdateStage:
		return "UpdateStage"
	case Instruction_RedeemPfp:
		return "RedeemPfp"
	case Instruction_RedeemLegendary:
		return "RedeemLegendary"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"init", (*Init)(nil),
		},
		{
			"redeem_funds", (*RedeemFunds)(nil),
		},
		{
			"pre_mint", (*PreMint)(nil),
		},
		{
			"transfer_authority", (*TransferAuthority)(nil),
		},
		{
			"unfreeze", (*Unfreeze)(nil),
		},
		{
			"update_metadata", (*UpdateMetadata)(nil),
		},
		{
			"buy_ticket", (*BuyTicket)(nil),
		},
		{
			"check_ticket", (*CheckTicket)(nil),
		},
		{
			"redeem_ticket", (*RedeemTicket)(nil),
		},
		{
			"fixed_redeem_ticket", (*FixedRedeemTicket)(nil),
		},
		{
			"init_stage", (*InitStage)(nil),
		},
		{
			"update_stage", (*UpdateStage)(nil),
		},
		{
			"redeem_pfp", (*RedeemPfp)(nil),
		},
		{
			"redeem_legendary", (*RedeemLegendary)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
