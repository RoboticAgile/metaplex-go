// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// BuyTicket is the `buyTicket` instruction.
type BuyTicket struct {
	Amount *uint64
	IsMax  *bool

	// [0] = [WRITE, SIGNER] initializer
	//
	// [1] = [WRITE] ticket
	//
	// [2] = [WRITE] collection
	//
	// [3] = [WRITE] stage
	//
	// [4] = [WRITE] paymentMint
	//
	// [5] = [] whitelistMint
	//
	// [6] = [WRITE] initializerTa
	//
	// [7] = [WRITE] stageTa
	//
	// [8] = [WRITE] initializerWhitelistTa
	//
	// [9] = [WRITE] collectionWhitelistTa
	//
	// [10] = [] tokenProgram
	//
	// [11] = [] associatedTokenProgram
	//
	// [12] = [] systemProgram
	//
	// [13] = [] rent
	//
	// [14] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBuyTicketInstructionBuilder creates a new `BuyTicket` instruction builder.
func NewBuyTicketInstructionBuilder() *BuyTicket {
	nd := &BuyTicket{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *BuyTicket) SetAmount(amount uint64) *BuyTicket {
	inst.Amount = &amount
	return inst
}

// SetIsMax sets the "isMax" parameter.
func (inst *BuyTicket) SetIsMax(isMax bool) *BuyTicket {
	inst.IsMax = &isMax
	return inst
}

// SetInitializerAccount sets the "initializer" account.
func (inst *BuyTicket) SetInitializerAccount(initializer ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(initializer).WRITE().SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *BuyTicket) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTicketAccount sets the "ticket" account.
func (inst *BuyTicket) SetTicketAccount(ticket ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(ticket).WRITE()
	return inst
}

// GetTicketAccount gets the "ticket" account.
func (inst *BuyTicket) GetTicketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCollectionAccount sets the "collection" account.
func (inst *BuyTicket) SetCollectionAccount(collection ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(collection).WRITE()
	return inst
}

// GetCollectionAccount gets the "collection" account.
func (inst *BuyTicket) GetCollectionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStageAccount sets the "stage" account.
func (inst *BuyTicket) SetStageAccount(stage ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(stage).WRITE()
	return inst
}

// GetStageAccount gets the "stage" account.
func (inst *BuyTicket) GetStageAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPaymentMintAccount sets the "paymentMint" account.
func (inst *BuyTicket) SetPaymentMintAccount(paymentMint ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(paymentMint).WRITE()
	return inst
}

// GetPaymentMintAccount gets the "paymentMint" account.
func (inst *BuyTicket) GetPaymentMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWhitelistMintAccount sets the "whitelistMint" account.
func (inst *BuyTicket) SetWhitelistMintAccount(whitelistMint ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(whitelistMint)
	return inst
}

// GetWhitelistMintAccount gets the "whitelistMint" account.
func (inst *BuyTicket) GetWhitelistMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetInitializerTaAccount sets the "initializerTa" account.
func (inst *BuyTicket) SetInitializerTaAccount(initializerTa ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(initializerTa).WRITE()
	return inst
}

// GetInitializerTaAccount gets the "initializerTa" account.
func (inst *BuyTicket) GetInitializerTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetStageTaAccount sets the "stageTa" account.
func (inst *BuyTicket) SetStageTaAccount(stageTa ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(stageTa).WRITE()
	return inst
}

// GetStageTaAccount gets the "stageTa" account.
func (inst *BuyTicket) GetStageTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetInitializerWhitelistTaAccount sets the "initializerWhitelistTa" account.
func (inst *BuyTicket) SetInitializerWhitelistTaAccount(initializerWhitelistTa ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(initializerWhitelistTa).WRITE()
	return inst
}

// GetInitializerWhitelistTaAccount gets the "initializerWhitelistTa" account.
func (inst *BuyTicket) GetInitializerWhitelistTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetCollectionWhitelistTaAccount sets the "collectionWhitelistTa" account.
func (inst *BuyTicket) SetCollectionWhitelistTaAccount(collectionWhitelistTa ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(collectionWhitelistTa).WRITE()
	return inst
}

// GetCollectionWhitelistTaAccount gets the "collectionWhitelistTa" account.
func (inst *BuyTicket) GetCollectionWhitelistTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *BuyTicket) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *BuyTicket) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *BuyTicket) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *BuyTicket) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *BuyTicket) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *BuyTicket) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetRentAccount sets the "rent" account.
func (inst *BuyTicket) SetRentAccount(rent ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *BuyTicket) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetClockAccount sets the "clock" account.
func (inst *BuyTicket) SetClockAccount(clock ag_solanago.PublicKey) *BuyTicket {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *BuyTicket) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst BuyTicket) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BuyTicket,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BuyTicket) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BuyTicket) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.IsMax == nil {
			return errors.New("IsMax parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Ticket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Collection is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Stage is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PaymentMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.WhitelistMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.InitializerTa is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.StageTa is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.InitializerWhitelistTa is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CollectionWhitelistTa is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *BuyTicket) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BuyTicket")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param(" IsMax", *inst.IsMax))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           initializer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                ticket", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            collection", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 stage", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           paymentMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         whitelistMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         initializerTa", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("               stageTa", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("initializerWhitelistTa", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta(" collectionWhitelistTa", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                 clock", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj BuyTicket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `IsMax` param:
	err = encoder.Encode(obj.IsMax)
	if err != nil {
		return err
	}
	return nil
}
func (obj *BuyTicket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `IsMax`:
	err = decoder.Decode(&obj.IsMax)
	if err != nil {
		return err
	}
	return nil
}

// NewBuyTicketInstruction declares a new BuyTicket instruction with the provided parameters and accounts.
func NewBuyTicketInstruction(
	// Parameters:
	amount uint64,
	isMax bool,
	// Accounts:
	initializer ag_solanago.PublicKey,
	ticket ag_solanago.PublicKey,
	collection ag_solanago.PublicKey,
	stage ag_solanago.PublicKey,
	paymentMint ag_solanago.PublicKey,
	whitelistMint ag_solanago.PublicKey,
	initializerTa ag_solanago.PublicKey,
	stageTa ag_solanago.PublicKey,
	initializerWhitelistTa ag_solanago.PublicKey,
	collectionWhitelistTa ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *BuyTicket {
	return NewBuyTicketInstructionBuilder().
		SetAmount(amount).
		SetIsMax(isMax).
		SetInitializerAccount(initializer).
		SetTicketAccount(ticket).
		SetCollectionAccount(collection).
		SetStageAccount(stage).
		SetPaymentMintAccount(paymentMint).
		SetWhitelistMintAccount(whitelistMint).
		SetInitializerTaAccount(initializerTa).
		SetStageTaAccount(stageTa).
		SetInitializerWhitelistTaAccount(initializerWhitelistTa).
		SetCollectionWhitelistTaAccount(collectionWhitelistTa).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetClockAccount(clock)
}
