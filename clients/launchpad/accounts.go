// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package launchpad

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
)

type LaunchpadCollection struct {
	Manager              ag_solanago.PublicKey
	Nonce                ag_solanago.PublicKey
	State                uint8
	CreationTime         int64
	LastUpdateTime       int64
	StagedSupply         uint64
	MaxSupply            uint64
	TotalPreMinted       uint64
	TotalMinted          uint64
	SellerFeeBasisPoints uint16
	CollectionMint       ag_solanago.PublicKey
	Creators             [5]ag_solanago.PublicKey
	Shares               [5]uint8
}

var LaunchpadCollectionDiscriminator = [8]byte{27, 0, 138, 77, 96, 136, 136, 28}

func (obj LaunchpadCollection) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LaunchpadCollectionDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Manager` param:
	err = encoder.Encode(obj.Manager)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `CreationTime` param:
	err = encoder.Encode(obj.CreationTime)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTime` param:
	err = encoder.Encode(obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Serialize `StagedSupply` param:
	err = encoder.Encode(obj.StagedSupply)
	if err != nil {
		return err
	}
	// Serialize `MaxSupply` param:
	err = encoder.Encode(obj.MaxSupply)
	if err != nil {
		return err
	}
	// Serialize `TotalPreMinted` param:
	err = encoder.Encode(obj.TotalPreMinted)
	if err != nil {
		return err
	}
	// Serialize `TotalMinted` param:
	err = encoder.Encode(obj.TotalMinted)
	if err != nil {
		return err
	}
	// Serialize `SellerFeeBasisPoints` param:
	err = encoder.Encode(obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `CollectionMint` param:
	err = encoder.Encode(obj.CollectionMint)
	if err != nil {
		return err
	}
	// Serialize `Creators` param:
	err = encoder.Encode(obj.Creators)
	if err != nil {
		return err
	}
	// Serialize `Shares` param:
	err = encoder.Encode(obj.Shares)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LaunchpadCollection) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LaunchpadCollectionDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[27 0 138 77 96 136 136 28]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Manager`:
	err = decoder.Decode(&obj.Manager)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `CreationTime`:
	err = decoder.Decode(&obj.CreationTime)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTime`:
	err = decoder.Decode(&obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Deserialize `StagedSupply`:
	err = decoder.Decode(&obj.StagedSupply)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupply`:
	err = decoder.Decode(&obj.MaxSupply)
	if err != nil {
		return err
	}
	// Deserialize `TotalPreMinted`:
	err = decoder.Decode(&obj.TotalPreMinted)
	if err != nil {
		return err
	}
	// Deserialize `TotalMinted`:
	err = decoder.Decode(&obj.TotalMinted)
	if err != nil {
		return err
	}
	// Deserialize `SellerFeeBasisPoints`:
	err = decoder.Decode(&obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `CollectionMint`:
	err = decoder.Decode(&obj.CollectionMint)
	if err != nil {
		return err
	}
	// Deserialize `Creators`:
	err = decoder.Decode(&obj.Creators)
	if err != nil {
		return err
	}
	// Deserialize `Shares`:
	err = decoder.Decode(&obj.Shares)
	if err != nil {
		return err
	}
	return nil
}

type LegendaryTracker struct {
	UserAddress   ag_solanago.PublicKey
	LegendaryMint ag_solanago.PublicKey
	NftMint       ag_solanago.PublicKey
}

var LegendaryTrackerDiscriminator = [8]byte{38, 68, 251, 93, 94, 99, 160, 84}

func (obj LegendaryTracker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LegendaryTrackerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `UserAddress` param:
	err = encoder.Encode(obj.UserAddress)
	if err != nil {
		return err
	}
	// Serialize `LegendaryMint` param:
	err = encoder.Encode(obj.LegendaryMint)
	if err != nil {
		return err
	}
	// Serialize `NftMint` param:
	err = encoder.Encode(obj.NftMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LegendaryTracker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LegendaryTrackerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[38 68 251 93 94 99 160 84]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `UserAddress`:
	err = decoder.Decode(&obj.UserAddress)
	if err != nil {
		return err
	}
	// Deserialize `LegendaryMint`:
	err = decoder.Decode(&obj.LegendaryMint)
	if err != nil {
		return err
	}
	// Deserialize `NftMint`:
	err = decoder.Decode(&obj.NftMint)
	if err != nil {
		return err
	}
	return nil
}

type Stage struct {
	Collection         ag_solanago.PublicKey
	Nonce              ag_solanago.PublicKey
	Title              string
	Description        string
	SpendType          uint8
	PricingType        uint8
	LimitPerUser       uint64
	MintPrice          uint64
	MinDynamicPrice    uint64
	MaxDynamicPrice    uint64
	PaymentMint        ag_solanago.PublicKey
	WhitelistMint      ag_solanago.PublicKey
	MaxSupply          uint64
	CanExceedMaxSupply bool
	TicketsAmount      uint64
	MintedAmount       uint64
	StartTime          int64
	EndTime            int64
}

var StageDiscriminator = [8]byte{128, 95, 240, 157, 209, 159, 69, 179}

func (obj Stage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StageDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Collection` param:
	err = encoder.Encode(obj.Collection)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Title` param:
	err = encoder.Encode(obj.Title)
	if err != nil {
		return err
	}
	// Serialize `Description` param:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return err
	}
	// Serialize `SpendType` param:
	err = encoder.Encode(obj.SpendType)
	if err != nil {
		return err
	}
	// Serialize `PricingType` param:
	err = encoder.Encode(obj.PricingType)
	if err != nil {
		return err
	}
	// Serialize `LimitPerUser` param:
	err = encoder.Encode(obj.LimitPerUser)
	if err != nil {
		return err
	}
	// Serialize `MintPrice` param:
	err = encoder.Encode(obj.MintPrice)
	if err != nil {
		return err
	}
	// Serialize `MinDynamicPrice` param:
	err = encoder.Encode(obj.MinDynamicPrice)
	if err != nil {
		return err
	}
	// Serialize `MaxDynamicPrice` param:
	err = encoder.Encode(obj.MaxDynamicPrice)
	if err != nil {
		return err
	}
	// Serialize `PaymentMint` param:
	err = encoder.Encode(obj.PaymentMint)
	if err != nil {
		return err
	}
	// Serialize `WhitelistMint` param:
	err = encoder.Encode(obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Serialize `MaxSupply` param:
	err = encoder.Encode(obj.MaxSupply)
	if err != nil {
		return err
	}
	// Serialize `CanExceedMaxSupply` param:
	err = encoder.Encode(obj.CanExceedMaxSupply)
	if err != nil {
		return err
	}
	// Serialize `TicketsAmount` param:
	err = encoder.Encode(obj.TicketsAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedAmount` param:
	err = encoder.Encode(obj.MintedAmount)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Stage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StageDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[128 95 240 157 209 159 69 179]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Collection`:
	err = decoder.Decode(&obj.Collection)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Title`:
	err = decoder.Decode(&obj.Title)
	if err != nil {
		return err
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return err
	}
	// Deserialize `SpendType`:
	err = decoder.Decode(&obj.SpendType)
	if err != nil {
		return err
	}
	// Deserialize `PricingType`:
	err = decoder.Decode(&obj.PricingType)
	if err != nil {
		return err
	}
	// Deserialize `LimitPerUser`:
	err = decoder.Decode(&obj.LimitPerUser)
	if err != nil {
		return err
	}
	// Deserialize `MintPrice`:
	err = decoder.Decode(&obj.MintPrice)
	if err != nil {
		return err
	}
	// Deserialize `MinDynamicPrice`:
	err = decoder.Decode(&obj.MinDynamicPrice)
	if err != nil {
		return err
	}
	// Deserialize `MaxDynamicPrice`:
	err = decoder.Decode(&obj.MaxDynamicPrice)
	if err != nil {
		return err
	}
	// Deserialize `PaymentMint`:
	err = decoder.Decode(&obj.PaymentMint)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistMint`:
	err = decoder.Decode(&obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupply`:
	err = decoder.Decode(&obj.MaxSupply)
	if err != nil {
		return err
	}
	// Deserialize `CanExceedMaxSupply`:
	err = decoder.Decode(&obj.CanExceedMaxSupply)
	if err != nil {
		return err
	}
	// Deserialize `TicketsAmount`:
	err = decoder.Decode(&obj.TicketsAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedAmount`:
	err = decoder.Decode(&obj.MintedAmount)
	if err != nil {
		return err
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	return nil
}

type Ticket struct {
	Initializer   ag_solanago.PublicKey
	State         uint8
	Stage         ag_solanago.PublicKey
	Collection    ag_solanago.PublicKey
	PaymentMint   ag_solanago.PublicKey
	WhitelistMint ag_solanago.PublicKey
	NftMint       ag_solanago.PublicKey
	UserBid       uint64
	MaxPrice      uint64
	IsMaxBid      bool
	NumberMinted  uint64
}

var TicketDiscriminator = [8]byte{41, 228, 24, 165, 78, 90, 235, 200}

func (obj Ticket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TicketDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Initializer` param:
	err = encoder.Encode(obj.Initializer)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `Stage` param:
	err = encoder.Encode(obj.Stage)
	if err != nil {
		return err
	}
	// Serialize `Collection` param:
	err = encoder.Encode(obj.Collection)
	if err != nil {
		return err
	}
	// Serialize `PaymentMint` param:
	err = encoder.Encode(obj.PaymentMint)
	if err != nil {
		return err
	}
	// Serialize `WhitelistMint` param:
	err = encoder.Encode(obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Serialize `NftMint` param:
	err = encoder.Encode(obj.NftMint)
	if err != nil {
		return err
	}
	// Serialize `UserBid` param:
	err = encoder.Encode(obj.UserBid)
	if err != nil {
		return err
	}
	// Serialize `MaxPrice` param:
	err = encoder.Encode(obj.MaxPrice)
	if err != nil {
		return err
	}
	// Serialize `IsMaxBid` param:
	err = encoder.Encode(obj.IsMaxBid)
	if err != nil {
		return err
	}
	// Serialize `NumberMinted` param:
	err = encoder.Encode(obj.NumberMinted)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Ticket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TicketDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[41 228 24 165 78 90 235 200]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Initializer`:
	err = decoder.Decode(&obj.Initializer)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `Stage`:
	err = decoder.Decode(&obj.Stage)
	if err != nil {
		return err
	}
	// Deserialize `Collection`:
	err = decoder.Decode(&obj.Collection)
	if err != nil {
		return err
	}
	// Deserialize `PaymentMint`:
	err = decoder.Decode(&obj.PaymentMint)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistMint`:
	err = decoder.Decode(&obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Deserialize `NftMint`:
	err = decoder.Decode(&obj.NftMint)
	if err != nil {
		return err
	}
	// Deserialize `UserBid`:
	err = decoder.Decode(&obj.UserBid)
	if err != nil {
		return err
	}
	// Deserialize `MaxPrice`:
	err = decoder.Decode(&obj.MaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `IsMaxBid`:
	err = decoder.Decode(&obj.IsMaxBid)
	if err != nil {
		return err
	}
	// Deserialize `NumberMinted`:
	err = decoder.Decode(&obj.NumberMinted)
	if err != nil {
		return err
	}
	return nil
}
