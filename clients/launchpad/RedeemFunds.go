// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RedeemFunds is the `redeemFunds` instruction.
type RedeemFunds struct {

	// [0] = [WRITE, SIGNER] manager
	//
	// [1] = [] treasury
	//
	// [2] = [WRITE] collection
	//
	// [3] = [WRITE] stage
	//
	// [4] = [] paymentMint
	//
	// [5] = [WRITE] stageTa
	//
	// [6] = [WRITE] managerTa
	//
	// [7] = [WRITE] treasuryTa
	//
	// [8] = [] associatedTokenProgram
	//
	// [9] = [] tokenProgram
	//
	// [10] = [] systemProgram
	//
	// [11] = [] clock
	//
	// [12] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRedeemFundsInstructionBuilder creates a new `RedeemFunds` instruction builder.
func NewRedeemFundsInstructionBuilder() *RedeemFunds {
	nd := &RedeemFunds{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetManagerAccount sets the "manager" account.
func (inst *RedeemFunds) SetManagerAccount(manager ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(manager).WRITE().SIGNER()
	return inst
}

// GetManagerAccount gets the "manager" account.
func (inst *RedeemFunds) GetManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTreasuryAccount sets the "treasury" account.
func (inst *RedeemFunds) SetTreasuryAccount(treasury ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(treasury)
	return inst
}

// GetTreasuryAccount gets the "treasury" account.
func (inst *RedeemFunds) GetTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCollectionAccount sets the "collection" account.
func (inst *RedeemFunds) SetCollectionAccount(collection ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(collection).WRITE()
	return inst
}

// GetCollectionAccount gets the "collection" account.
func (inst *RedeemFunds) GetCollectionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStageAccount sets the "stage" account.
func (inst *RedeemFunds) SetStageAccount(stage ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(stage).WRITE()
	return inst
}

// GetStageAccount gets the "stage" account.
func (inst *RedeemFunds) GetStageAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPaymentMintAccount sets the "paymentMint" account.
func (inst *RedeemFunds) SetPaymentMintAccount(paymentMint ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(paymentMint)
	return inst
}

// GetPaymentMintAccount gets the "paymentMint" account.
func (inst *RedeemFunds) GetPaymentMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStageTaAccount sets the "stageTa" account.
func (inst *RedeemFunds) SetStageTaAccount(stageTa ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(stageTa).WRITE()
	return inst
}

// GetStageTaAccount gets the "stageTa" account.
func (inst *RedeemFunds) GetStageTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetManagerTaAccount sets the "managerTa" account.
func (inst *RedeemFunds) SetManagerTaAccount(managerTa ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(managerTa).WRITE()
	return inst
}

// GetManagerTaAccount gets the "managerTa" account.
func (inst *RedeemFunds) GetManagerTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTreasuryTaAccount sets the "treasuryTa" account.
func (inst *RedeemFunds) SetTreasuryTaAccount(treasuryTa ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(treasuryTa).WRITE()
	return inst
}

// GetTreasuryTaAccount gets the "treasuryTa" account.
func (inst *RedeemFunds) GetTreasuryTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *RedeemFunds) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *RedeemFunds) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RedeemFunds) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RedeemFunds) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RedeemFunds) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RedeemFunds) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetClockAccount sets the "clock" account.
func (inst *RedeemFunds) SetClockAccount(clock ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *RedeemFunds) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetRentAccount sets the "rent" account.
func (inst *RedeemFunds) SetRentAccount(rent ag_solanago.PublicKey) *RedeemFunds {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *RedeemFunds) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst RedeemFunds) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RedeemFunds,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RedeemFunds) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RedeemFunds) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Manager is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Treasury is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Collection is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Stage is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PaymentMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StageTa is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ManagerTa is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TreasuryTa is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *RedeemFunds) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RedeemFunds")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               manager", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              treasury", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            collection", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 stage", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           paymentMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("               stageTa", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             managerTa", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            treasuryTa", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                 clock", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj RedeemFunds) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RedeemFunds) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRedeemFundsInstruction declares a new RedeemFunds instruction with the provided parameters and accounts.
func NewRedeemFundsInstruction(
	// Accounts:
	manager ag_solanago.PublicKey,
	treasury ag_solanago.PublicKey,
	collection ag_solanago.PublicKey,
	stage ag_solanago.PublicKey,
	paymentMint ag_solanago.PublicKey,
	stageTa ag_solanago.PublicKey,
	managerTa ag_solanago.PublicKey,
	treasuryTa ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *RedeemFunds {
	return NewRedeemFundsInstructionBuilder().
		SetManagerAccount(manager).
		SetTreasuryAccount(treasury).
		SetCollectionAccount(collection).
		SetStageAccount(stage).
		SetPaymentMintAccount(paymentMint).
		SetStageTaAccount(stageTa).
		SetManagerTaAccount(managerTa).
		SetTreasuryTaAccount(treasuryTa).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetClockAccount(clock).
		SetRentAccount(rent)
}
