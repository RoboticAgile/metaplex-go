// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateMetadata is the `updateMetadata` instruction.
type UpdateMetadata struct {
	Name                 *string
	Symbol               *string
	Uri                  *string
	SellerFeeBasisPoints *uint16

	// [0] = [WRITE, SIGNER] authority
	//
	// [1] = [WRITE] nftMetadata
	//
	// [2] = [] mplTokenMetadata
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateMetadataInstructionBuilder creates a new `UpdateMetadata` instruction builder.
func NewUpdateMetadataInstructionBuilder() *UpdateMetadata {
	nd := &UpdateMetadata{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *UpdateMetadata) SetName(name string) *UpdateMetadata {
	inst.Name = &name
	return inst
}

// SetSymbol sets the "symbol" parameter.
func (inst *UpdateMetadata) SetSymbol(symbol string) *UpdateMetadata {
	inst.Symbol = &symbol
	return inst
}

// SetUri sets the "uri" parameter.
func (inst *UpdateMetadata) SetUri(uri string) *UpdateMetadata {
	inst.Uri = &uri
	return inst
}

// SetSellerFeeBasisPoints sets the "sellerFeeBasisPoints" parameter.
func (inst *UpdateMetadata) SetSellerFeeBasisPoints(sellerFeeBasisPoints uint16) *UpdateMetadata {
	inst.SellerFeeBasisPoints = &sellerFeeBasisPoints
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UpdateMetadata) SetAuthorityAccount(authority ag_solanago.PublicKey) *UpdateMetadata {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UpdateMetadata) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNftMetadataAccount sets the "nftMetadata" account.
func (inst *UpdateMetadata) SetNftMetadataAccount(nftMetadata ag_solanago.PublicKey) *UpdateMetadata {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(nftMetadata).WRITE()
	return inst
}

// GetNftMetadataAccount gets the "nftMetadata" account.
func (inst *UpdateMetadata) GetNftMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMplTokenMetadataAccount sets the "mplTokenMetadata" account.
func (inst *UpdateMetadata) SetMplTokenMetadataAccount(mplTokenMetadata ag_solanago.PublicKey) *UpdateMetadata {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mplTokenMetadata)
	return inst
}

// GetMplTokenMetadataAccount gets the "mplTokenMetadata" account.
func (inst *UpdateMetadata) GetMplTokenMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateMetadata) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateMetadata,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateMetadata) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateMetadata) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.Symbol == nil {
			return errors.New("Symbol parameter is not set")
		}
		if inst.Uri == nil {
			return errors.New("Uri parameter is not set")
		}
		if inst.SellerFeeBasisPoints == nil {
			return errors.New("SellerFeeBasisPoints parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.NftMetadata is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MplTokenMetadata is not set")
		}
	}
	return nil
}

func (inst *UpdateMetadata) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateMetadata")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("              Symbol", *inst.Symbol))
						paramsBranch.Child(ag_format.Param("                 Uri", *inst.Uri))
						paramsBranch.Child(ag_format.Param("SellerFeeBasisPoints", *inst.SellerFeeBasisPoints))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     nftMetadata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("mplTokenMetadata", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `SellerFeeBasisPoints` param:
	err = encoder.Encode(obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `SellerFeeBasisPoints`:
	err = decoder.Decode(&obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateMetadataInstruction declares a new UpdateMetadata instruction with the provided parameters and accounts.
func NewUpdateMetadataInstruction(
	// Parameters:
	name string,
	symbol string,
	uri string,
	sellerFeeBasisPoints uint16,
	// Accounts:
	authority ag_solanago.PublicKey,
	nftMetadata ag_solanago.PublicKey,
	mplTokenMetadata ag_solanago.PublicKey) *UpdateMetadata {
	return NewUpdateMetadataInstructionBuilder().
		SetName(name).
		SetSymbol(symbol).
		SetUri(uri).
		SetSellerFeeBasisPoints(sellerFeeBasisPoints).
		SetAuthorityAccount(authority).
		SetNftMetadataAccount(nftMetadata).
		SetMplTokenMetadataAccount(mplTokenMetadata)
}
