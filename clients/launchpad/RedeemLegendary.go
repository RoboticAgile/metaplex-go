// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RedeemLegendary is the `redeemLegendary` instruction.
type RedeemLegendary struct {
	Nonce *ag_solanago.PublicKey

	// [0] = [WRITE, SIGNER] initializer
	//
	// [1] = [WRITE] collection
	//
	// [2] = [WRITE] legendaryTracker
	//
	// [3] = [] nftMint
	//
	// [4] = [WRITE] initializerNftTa
	//
	// [5] = [WRITE] collectionNftTa
	//
	// [6] = [] legendaryMint
	//
	// [7] = [WRITE] initializerLegendaryTa
	//
	// [8] = [WRITE] collectionLegendaryTa
	//
	// [9] = [WRITE] nftMetadata
	//
	// [10] = [WRITE] nftMasterEdition
	//
	// [11] = [] mplTokenMetadata
	//
	// [12] = [] tokenProgram
	//
	// [13] = [] associatedTokenProgram
	//
	// [14] = [] systemProgram
	//
	// [15] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRedeemLegendaryInstructionBuilder creates a new `RedeemLegendary` instruction builder.
func NewRedeemLegendaryInstructionBuilder() *RedeemLegendary {
	nd := &RedeemLegendary{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetNonce sets the "nonce" parameter.
func (inst *RedeemLegendary) SetNonce(nonce ag_solanago.PublicKey) *RedeemLegendary {
	inst.Nonce = &nonce
	return inst
}

// SetInitializerAccount sets the "initializer" account.
func (inst *RedeemLegendary) SetInitializerAccount(initializer ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(initializer).WRITE().SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *RedeemLegendary) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCollectionAccount sets the "collection" account.
func (inst *RedeemLegendary) SetCollectionAccount(collection ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(collection).WRITE()
	return inst
}

// GetCollectionAccount gets the "collection" account.
func (inst *RedeemLegendary) GetCollectionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLegendaryTrackerAccount sets the "legendaryTracker" account.
func (inst *RedeemLegendary) SetLegendaryTrackerAccount(legendaryTracker ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(legendaryTracker).WRITE()
	return inst
}

// GetLegendaryTrackerAccount gets the "legendaryTracker" account.
func (inst *RedeemLegendary) GetLegendaryTrackerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNftMintAccount sets the "nftMint" account.
func (inst *RedeemLegendary) SetNftMintAccount(nftMint ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(nftMint)
	return inst
}

// GetNftMintAccount gets the "nftMint" account.
func (inst *RedeemLegendary) GetNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetInitializerNftTaAccount sets the "initializerNftTa" account.
func (inst *RedeemLegendary) SetInitializerNftTaAccount(initializerNftTa ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(initializerNftTa).WRITE()
	return inst
}

// GetInitializerNftTaAccount gets the "initializerNftTa" account.
func (inst *RedeemLegendary) GetInitializerNftTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCollectionNftTaAccount sets the "collectionNftTa" account.
func (inst *RedeemLegendary) SetCollectionNftTaAccount(collectionNftTa ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(collectionNftTa).WRITE()
	return inst
}

// GetCollectionNftTaAccount gets the "collectionNftTa" account.
func (inst *RedeemLegendary) GetCollectionNftTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetLegendaryMintAccount sets the "legendaryMint" account.
func (inst *RedeemLegendary) SetLegendaryMintAccount(legendaryMint ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(legendaryMint)
	return inst
}

// GetLegendaryMintAccount gets the "legendaryMint" account.
func (inst *RedeemLegendary) GetLegendaryMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetInitializerLegendaryTaAccount sets the "initializerLegendaryTa" account.
func (inst *RedeemLegendary) SetInitializerLegendaryTaAccount(initializerLegendaryTa ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(initializerLegendaryTa).WRITE()
	return inst
}

// GetInitializerLegendaryTaAccount gets the "initializerLegendaryTa" account.
func (inst *RedeemLegendary) GetInitializerLegendaryTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCollectionLegendaryTaAccount sets the "collectionLegendaryTa" account.
func (inst *RedeemLegendary) SetCollectionLegendaryTaAccount(collectionLegendaryTa ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(collectionLegendaryTa).WRITE()
	return inst
}

// GetCollectionLegendaryTaAccount gets the "collectionLegendaryTa" account.
func (inst *RedeemLegendary) GetCollectionLegendaryTaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetNftMetadataAccount sets the "nftMetadata" account.
func (inst *RedeemLegendary) SetNftMetadataAccount(nftMetadata ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(nftMetadata).WRITE()
	return inst
}

// GetNftMetadataAccount gets the "nftMetadata" account.
func (inst *RedeemLegendary) GetNftMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetNftMasterEditionAccount sets the "nftMasterEdition" account.
func (inst *RedeemLegendary) SetNftMasterEditionAccount(nftMasterEdition ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(nftMasterEdition).WRITE()
	return inst
}

// GetNftMasterEditionAccount gets the "nftMasterEdition" account.
func (inst *RedeemLegendary) GetNftMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetMplTokenMetadataAccount sets the "mplTokenMetadata" account.
func (inst *RedeemLegendary) SetMplTokenMetadataAccount(mplTokenMetadata ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(mplTokenMetadata)
	return inst
}

// GetMplTokenMetadataAccount gets the "mplTokenMetadata" account.
func (inst *RedeemLegendary) GetMplTokenMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RedeemLegendary) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RedeemLegendary) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *RedeemLegendary) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *RedeemLegendary) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RedeemLegendary) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RedeemLegendary) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetRentAccount sets the "rent" account.
func (inst *RedeemLegendary) SetRentAccount(rent ag_solanago.PublicKey) *RedeemLegendary {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *RedeemLegendary) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst RedeemLegendary) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RedeemLegendary,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RedeemLegendary) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RedeemLegendary) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Nonce == nil {
			return errors.New("Nonce parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Collection is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LegendaryTracker is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NftMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.InitializerNftTa is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CollectionNftTa is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.LegendaryMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.InitializerLegendaryTa is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CollectionLegendaryTa is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.NftMetadata is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.NftMasterEdition is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MplTokenMetadata is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *RedeemLegendary) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RedeemLegendary")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Nonce", *inst.Nonce))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           initializer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            collection", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      legendaryTracker", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               nftMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      initializerNftTa", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       collectionNftTa", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         legendaryMint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("initializerLegendaryTa", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" collectionLegendaryTa", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           nftMetadata", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      nftMasterEdition", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("      mplTokenMetadata", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj RedeemLegendary) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RedeemLegendary) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

// NewRedeemLegendaryInstruction declares a new RedeemLegendary instruction with the provided parameters and accounts.
func NewRedeemLegendaryInstruction(
	// Parameters:
	nonce ag_solanago.PublicKey,
	// Accounts:
	initializer ag_solanago.PublicKey,
	collection ag_solanago.PublicKey,
	legendaryTracker ag_solanago.PublicKey,
	nftMint ag_solanago.PublicKey,
	initializerNftTa ag_solanago.PublicKey,
	collectionNftTa ag_solanago.PublicKey,
	legendaryMint ag_solanago.PublicKey,
	initializerLegendaryTa ag_solanago.PublicKey,
	collectionLegendaryTa ag_solanago.PublicKey,
	nftMetadata ag_solanago.PublicKey,
	nftMasterEdition ag_solanago.PublicKey,
	mplTokenMetadata ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *RedeemLegendary {
	return NewRedeemLegendaryInstructionBuilder().
		SetNonce(nonce).
		SetInitializerAccount(initializer).
		SetCollectionAccount(collection).
		SetLegendaryTrackerAccount(legendaryTracker).
		SetNftMintAccount(nftMint).
		SetInitializerNftTaAccount(initializerNftTa).
		SetCollectionNftTaAccount(collectionNftTa).
		SetLegendaryMintAccount(legendaryMint).
		SetInitializerLegendaryTaAccount(initializerLegendaryTa).
		SetCollectionLegendaryTaAccount(collectionLegendaryTa).
		SetNftMetadataAccount(nftMetadata).
		SetNftMasterEditionAccount(nftMasterEdition).
		SetMplTokenMetadataAccount(mplTokenMetadata).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
