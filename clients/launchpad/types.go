// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package launchpad

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
)

type InitLaunchpadCollectionParams struct {
	Nonce     ag_solanago.PublicKey
	Manager   ag_solanago.PublicKey
	MaxSupply uint64
	Name      string
	Symbol    string
	Uri       string
	Creators  [5]ag_solanago.PublicKey
	Shares    [5]uint8
}

func (obj InitLaunchpadCollectionParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Manager` param:
	err = encoder.Encode(obj.Manager)
	if err != nil {
		return err
	}
	// Serialize `MaxSupply` param:
	err = encoder.Encode(obj.MaxSupply)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `Creators` param:
	err = encoder.Encode(obj.Creators)
	if err != nil {
		return err
	}
	// Serialize `Shares` param:
	err = encoder.Encode(obj.Shares)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitLaunchpadCollectionParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Manager`:
	err = decoder.Decode(&obj.Manager)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupply`:
	err = decoder.Decode(&obj.MaxSupply)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `Creators`:
	err = decoder.Decode(&obj.Creators)
	if err != nil {
		return err
	}
	// Deserialize `Shares`:
	err = decoder.Decode(&obj.Shares)
	if err != nil {
		return err
	}
	return nil
}

type InitStageParams struct {
	Title              string
	Nonce              ag_solanago.PublicKey
	Description        string
	SpendType          uint8
	PricingType        uint8
	LimitPerUser       uint64
	MintPrice          uint64
	MinDynamicPrice    uint64
	MaxDynamicPrice    uint64
	PaymentMint        ag_solanago.PublicKey
	WhitelistMint      ag_solanago.PublicKey
	Supply             uint64
	CanExceedMaxSupply bool
	StartTime          int64
	EndTime            int64
}

func (obj InitStageParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Title` param:
	err = encoder.Encode(obj.Title)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Description` param:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return err
	}
	// Serialize `SpendType` param:
	err = encoder.Encode(obj.SpendType)
	if err != nil {
		return err
	}
	// Serialize `PricingType` param:
	err = encoder.Encode(obj.PricingType)
	if err != nil {
		return err
	}
	// Serialize `LimitPerUser` param:
	err = encoder.Encode(obj.LimitPerUser)
	if err != nil {
		return err
	}
	// Serialize `MintPrice` param:
	err = encoder.Encode(obj.MintPrice)
	if err != nil {
		return err
	}
	// Serialize `MinDynamicPrice` param:
	err = encoder.Encode(obj.MinDynamicPrice)
	if err != nil {
		return err
	}
	// Serialize `MaxDynamicPrice` param:
	err = encoder.Encode(obj.MaxDynamicPrice)
	if err != nil {
		return err
	}
	// Serialize `PaymentMint` param:
	err = encoder.Encode(obj.PaymentMint)
	if err != nil {
		return err
	}
	// Serialize `WhitelistMint` param:
	err = encoder.Encode(obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `CanExceedMaxSupply` param:
	err = encoder.Encode(obj.CanExceedMaxSupply)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitStageParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Title`:
	err = decoder.Decode(&obj.Title)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return err
	}
	// Deserialize `SpendType`:
	err = decoder.Decode(&obj.SpendType)
	if err != nil {
		return err
	}
	// Deserialize `PricingType`:
	err = decoder.Decode(&obj.PricingType)
	if err != nil {
		return err
	}
	// Deserialize `LimitPerUser`:
	err = decoder.Decode(&obj.LimitPerUser)
	if err != nil {
		return err
	}
	// Deserialize `MintPrice`:
	err = decoder.Decode(&obj.MintPrice)
	if err != nil {
		return err
	}
	// Deserialize `MinDynamicPrice`:
	err = decoder.Decode(&obj.MinDynamicPrice)
	if err != nil {
		return err
	}
	// Deserialize `MaxDynamicPrice`:
	err = decoder.Decode(&obj.MaxDynamicPrice)
	if err != nil {
		return err
	}
	// Deserialize `PaymentMint`:
	err = decoder.Decode(&obj.PaymentMint)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistMint`:
	err = decoder.Decode(&obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `CanExceedMaxSupply`:
	err = decoder.Decode(&obj.CanExceedMaxSupply)
	if err != nil {
		return err
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	return nil
}

type UpdateStageParams struct {
	Title         string
	Description   string
	SpendType     uint8
	PricingType   uint8
	MintPrice     uint64
	LimitPerUser  uint64
	PaymentMint   ag_solanago.PublicKey
	WhitelistMint ag_solanago.PublicKey
	MaxSupply     uint64
	StartTime     int64
	EndTime       int64
}

func (obj UpdateStageParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Title` param:
	err = encoder.Encode(obj.Title)
	if err != nil {
		return err
	}
	// Serialize `Description` param:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return err
	}
	// Serialize `SpendType` param:
	err = encoder.Encode(obj.SpendType)
	if err != nil {
		return err
	}
	// Serialize `PricingType` param:
	err = encoder.Encode(obj.PricingType)
	if err != nil {
		return err
	}
	// Serialize `MintPrice` param:
	err = encoder.Encode(obj.MintPrice)
	if err != nil {
		return err
	}
	// Serialize `LimitPerUser` param:
	err = encoder.Encode(obj.LimitPerUser)
	if err != nil {
		return err
	}
	// Serialize `PaymentMint` param:
	err = encoder.Encode(obj.PaymentMint)
	if err != nil {
		return err
	}
	// Serialize `WhitelistMint` param:
	err = encoder.Encode(obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Serialize `MaxSupply` param:
	err = encoder.Encode(obj.MaxSupply)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateStageParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Title`:
	err = decoder.Decode(&obj.Title)
	if err != nil {
		return err
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return err
	}
	// Deserialize `SpendType`:
	err = decoder.Decode(&obj.SpendType)
	if err != nil {
		return err
	}
	// Deserialize `PricingType`:
	err = decoder.Decode(&obj.PricingType)
	if err != nil {
		return err
	}
	// Deserialize `MintPrice`:
	err = decoder.Decode(&obj.MintPrice)
	if err != nil {
		return err
	}
	// Deserialize `LimitPerUser`:
	err = decoder.Decode(&obj.LimitPerUser)
	if err != nil {
		return err
	}
	// Deserialize `PaymentMint`:
	err = decoder.Decode(&obj.PaymentMint)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistMint`:
	err = decoder.Decode(&obj.WhitelistMint)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupply`:
	err = decoder.Decode(&obj.MaxSupply)
	if err != nil {
		return err
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	return nil
}

type CollectionState ag_binary.BorshEnum

const (
	CollectionStateInitialized CollectionState = iota
	CollectionStatePreMinted
	CollectionStatePaused
	CollectionStateEnded
)

func (value CollectionState) String() string {
	switch value {
	case CollectionStateInitialized:
		return "Initialized"
	case CollectionStatePreMinted:
		return "PreMinted"
	case CollectionStatePaused:
		return "Paused"
	case CollectionStateEnded:
		return "Ended"
	default:
		return ""
	}
}

type SpendType ag_binary.BorshEnum

const (
	SpendTypeFixed SpendType = iota
	SpendTypeWagers
)

func (value SpendType) String() string {
	switch value {
	case SpendTypeFixed:
		return "Fixed"
	case SpendTypeWagers:
		return "Wagers"
	default:
		return ""
	}
}

type PricingType ag_binary.BorshEnum

const (
	PricingTypeFixed PricingType = iota
	PricingTypeLinear
)

func (value PricingType) String() string {
	switch value {
	case PricingTypeFixed:
		return "Fixed"
	case PricingTypeLinear:
		return "Linear"
	default:
		return ""
	}
}

type TicketState ag_binary.BorshEnum

const (
	TicketStateInitialized TicketState = iota
	TicketStateToCheck
	TicketStateRedeemable
	TicketStateClosed
)

func (value TicketState) String() string {
	switch value {
	case TicketStateInitialized:
		return "Initialized"
	case TicketStateToCheck:
		return "ToCheck"
	case TicketStateRedeemable:
		return "Redeemable"
	case TicketStateClosed:
		return "Closed"
	default:
		return ""
	}
}

type TimeCheckType ag_binary.BorshEnum

const (
	TimeCheckTypeShouldNotStart TimeCheckType = iota
	TimeCheckTypeShouldNotEnd
	TimeCheckTypeShouldBeEnded
)

func (value TimeCheckType) String() string {
	switch value {
	case TimeCheckTypeShouldNotStart:
		return "ShouldNotStart"
	case TimeCheckTypeShouldNotEnd:
		return "ShouldNotEnd"
	case TimeCheckTypeShouldBeEnded:
		return "ShouldBeEnded"
	default:
		return ""
	}
}
