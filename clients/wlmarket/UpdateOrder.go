// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package wlmarket

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateOrder is the `updateOrder` instruction.
type UpdateOrder struct {
	Amount *uint64
	Cost   *uint64
	Expiry *uint64

	// [0] = [WRITE] order
	//
	// [1] = [] mint
	//
	// [2] = [WRITE, SIGNER] owner
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateOrderInstructionBuilder creates a new `UpdateOrder` instruction builder.
func NewUpdateOrderInstructionBuilder() *UpdateOrder {
	nd := &UpdateOrder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *UpdateOrder) SetAmount(amount uint64) *UpdateOrder {
	inst.Amount = &amount
	return inst
}

// SetCost sets the "cost" parameter.
func (inst *UpdateOrder) SetCost(cost uint64) *UpdateOrder {
	inst.Cost = &cost
	return inst
}

// SetExpiry sets the "expiry" parameter.
func (inst *UpdateOrder) SetExpiry(expiry uint64) *UpdateOrder {
	inst.Expiry = &expiry
	return inst
}

// SetOrderAccount sets the "order" account.
func (inst *UpdateOrder) SetOrderAccount(order ag_solanago.PublicKey) *UpdateOrder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(order).WRITE()
	return inst
}

// GetOrderAccount gets the "order" account.
func (inst *UpdateOrder) GetOrderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *UpdateOrder) SetMintAccount(mint ag_solanago.PublicKey) *UpdateOrder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *UpdateOrder) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOwnerAccount sets the "owner" account.
func (inst *UpdateOrder) SetOwnerAccount(owner ag_solanago.PublicKey) *UpdateOrder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *UpdateOrder) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UpdateOrder) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpdateOrder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UpdateOrder) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdateOrder) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateOrder,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateOrder) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateOrder) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.Cost == nil {
			return errors.New("Cost parameter is not set")
		}
		if inst.Expiry == nil {
			return errors.New("Expiry parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Order is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UpdateOrder) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateOrder")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("  Cost", *inst.Cost))
						paramsBranch.Child(ag_format.Param("Expiry", *inst.Expiry))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        order", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        owner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Cost` param:
	err = encoder.Encode(obj.Cost)
	if err != nil {
		return err
	}
	// Serialize `Expiry` param:
	err = encoder.Encode(obj.Expiry)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Cost`:
	err = decoder.Decode(&obj.Cost)
	if err != nil {
		return err
	}
	// Deserialize `Expiry`:
	err = decoder.Decode(&obj.Expiry)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateOrderInstruction declares a new UpdateOrder instruction with the provided parameters and accounts.
func NewUpdateOrderInstruction(
	// Parameters:
	amount uint64,
	cost uint64,
	expiry uint64,
	// Accounts:
	order ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UpdateOrder {
	return NewUpdateOrderInstructionBuilder().
		SetAmount(amount).
		SetCost(cost).
		SetExpiry(expiry).
		SetOrderAccount(order).
		SetMintAccount(mint).
		SetOwnerAccount(owner).
		SetSystemProgramAccount(systemProgram)
}
