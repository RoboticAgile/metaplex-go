// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package wlmarket

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
	ag_format "github.com/desperatee/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseItem is the `closeItem` instruction.
type CloseItem struct {

	// [0] = [WRITE] item
	//
	// [1] = [WRITE] owner
	//
	// [2] = [SIGNER] signer
	//
	// [3] = [WRITE] mint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseItemInstructionBuilder creates a new `CloseItem` instruction builder.
func NewCloseItemInstructionBuilder() *CloseItem {
	nd := &CloseItem{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetItemAccount sets the "item" account.
func (inst *CloseItem) SetItemAccount(item ag_solanago.PublicKey) *CloseItem {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(item).WRITE()
	return inst
}

// GetItemAccount gets the "item" account.
func (inst *CloseItem) GetItemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *CloseItem) SetOwnerAccount(owner ag_solanago.PublicKey) *CloseItem {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).WRITE()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *CloseItem) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSignerAccount sets the "signer" account.
func (inst *CloseItem) SetSignerAccount(signer ag_solanago.PublicKey) *CloseItem {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(signer).SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *CloseItem) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *CloseItem) SetMintAccount(mint ag_solanago.PublicKey) *CloseItem {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *CloseItem) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst CloseItem) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseItem,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseItem) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseItem) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Item is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
	}
	return nil
}

func (inst *CloseItem) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseItem")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  item", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("signer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  mint", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CloseItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CloseItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCloseItemInstruction declares a new CloseItem instruction with the provided parameters and accounts.
func NewCloseItemInstruction(
	// Accounts:
	item ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	mint ag_solanago.PublicKey) *CloseItem {
	return NewCloseItemInstructionBuilder().
		SetItemAccount(item).
		SetOwnerAccount(owner).
		SetSignerAccount(signer).
		SetMintAccount(mint)
}
