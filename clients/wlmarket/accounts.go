// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package wlmarket

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/desperatee/solana-go"
)

type Item struct {
	Bump   uint8
	Mint   ag_solanago.PublicKey
	Owner  ag_solanago.PublicKey
	Cost   uint64
	Count  uint64
	Foxy   bool
	Staked bool
}

var ItemDiscriminator = [8]byte{92, 157, 163, 130, 72, 254, 86, 216}

func (obj Item) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ItemDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Cost` param:
	err = encoder.Encode(obj.Cost)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	// Serialize `Foxy` param:
	err = encoder.Encode(obj.Foxy)
	if err != nil {
		return err
	}
	// Serialize `Staked` param:
	err = encoder.Encode(obj.Staked)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Item) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ItemDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[92 157 163 130 72 254 86 216]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Cost`:
	err = decoder.Decode(&obj.Cost)
	if err != nil {
		return err
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	// Deserialize `Foxy`:
	err = decoder.Decode(&obj.Foxy)
	if err != nil {
		return err
	}
	// Deserialize `Staked`:
	err = decoder.Decode(&obj.Staked)
	if err != nil {
		return err
	}
	return nil
}

type Order struct {
	Bump   uint8
	Mint   ag_solanago.PublicKey
	Owner  ag_solanago.PublicKey
	Cost   uint64
	Count  uint64
	Foxy   bool
	Time   uint64
	Expiry uint64
}

var OrderDiscriminator = [8]byte{134, 173, 223, 185, 77, 86, 28, 51}

func (obj Order) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OrderDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Cost` param:
	err = encoder.Encode(obj.Cost)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	// Serialize `Foxy` param:
	err = encoder.Encode(obj.Foxy)
	if err != nil {
		return err
	}
	// Serialize `Time` param:
	err = encoder.Encode(obj.Time)
	if err != nil {
		return err
	}
	// Serialize `Expiry` param:
	err = encoder.Encode(obj.Expiry)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Order) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OrderDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[134 173 223 185 77 86 28 51]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Cost`:
	err = decoder.Decode(&obj.Cost)
	if err != nil {
		return err
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	// Deserialize `Foxy`:
	err = decoder.Decode(&obj.Foxy)
	if err != nil {
		return err
	}
	// Deserialize `Time`:
	err = decoder.Decode(&obj.Time)
	if err != nil {
		return err
	}
	// Deserialize `Expiry`:
	err = decoder.Decode(&obj.Expiry)
	if err != nil {
		return err
	}
	return nil
}

type Fox struct {
	Fox        ag_solanago.PublicKey
	Owner      ag_solanago.PublicKey
	Tff        bool
	Other      bool
	Xp         uint64
	Missions   uint64
	Multiplier uint64
}

var FoxDiscriminator = [8]byte{90, 157, 16, 49, 91, 22, 164, 213}

func (obj Fox) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FoxDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Fox` param:
	err = encoder.Encode(obj.Fox)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Tff` param:
	err = encoder.Encode(obj.Tff)
	if err != nil {
		return err
	}
	// Serialize `Other` param:
	err = encoder.Encode(obj.Other)
	if err != nil {
		return err
	}
	// Serialize `Xp` param:
	err = encoder.Encode(obj.Xp)
	if err != nil {
		return err
	}
	// Serialize `Missions` param:
	err = encoder.Encode(obj.Missions)
	if err != nil {
		return err
	}
	// Serialize `Multiplier` param:
	err = encoder.Encode(obj.Multiplier)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Fox) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FoxDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[90 157 16 49 91 22 164 213]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Fox`:
	err = decoder.Decode(&obj.Fox)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Tff`:
	err = decoder.Decode(&obj.Tff)
	if err != nil {
		return err
	}
	// Deserialize `Other`:
	err = decoder.Decode(&obj.Other)
	if err != nil {
		return err
	}
	// Deserialize `Xp`:
	err = decoder.Decode(&obj.Xp)
	if err != nil {
		return err
	}
	// Deserialize `Missions`:
	err = decoder.Decode(&obj.Missions)
	if err != nil {
		return err
	}
	// Deserialize `Multiplier`:
	err = decoder.Decode(&obj.Multiplier)
	if err != nil {
		return err
	}
	return nil
}

type StakingAccount struct {
	Bump      uint8
	Fox       ag_solanago.PublicKey
	Owner     ag_solanago.PublicKey
	Lock      int64
	LastClaim int64
	Tff       bool
	V2        bool
}

var StakingAccountDiscriminator = [8]byte{52, 178, 251, 157, 180, 186, 98, 234}

func (obj StakingAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StakingAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Fox` param:
	err = encoder.Encode(obj.Fox)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Lock` param:
	err = encoder.Encode(obj.Lock)
	if err != nil {
		return err
	}
	// Serialize `LastClaim` param:
	err = encoder.Encode(obj.LastClaim)
	if err != nil {
		return err
	}
	// Serialize `Tff` param:
	err = encoder.Encode(obj.Tff)
	if err != nil {
		return err
	}
	// Serialize `V2` param:
	err = encoder.Encode(obj.V2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakingAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StakingAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[52 178 251 157 180 186 98 234]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Fox`:
	err = decoder.Decode(&obj.Fox)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Lock`:
	err = decoder.Decode(&obj.Lock)
	if err != nil {
		return err
	}
	// Deserialize `LastClaim`:
	err = decoder.Decode(&obj.LastClaim)
	if err != nil {
		return err
	}
	// Deserialize `Tff`:
	err = decoder.Decode(&obj.Tff)
	if err != nil {
		return err
	}
	// Deserialize `V2`:
	err = decoder.Decode(&obj.V2)
	if err != nil {
		return err
	}
	return nil
}
