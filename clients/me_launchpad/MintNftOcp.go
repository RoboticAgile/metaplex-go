// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package me_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/RoboticAgile/solana-go"
	ag_format "github.com/RoboticAgile/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintNftOcp is the `mintNftOcp` instruction.
type MintNftOcp struct {
	WalletLimitBump *uint8
	InOrder         *bool
	UserLimit       *uint8 `bin:"optional"`
	CurrTime        *int64

	// [0] = [] config
	//
	// [1] = [WRITE] candyMachine
	//
	// [2] = [] mintReceiver
	//
	// [3] = [WRITE] candyMachineWalletAuthority
	//
	// [4] = [WRITE, SIGNER] payer
	//
	// [5] = [WRITE] launchStagesInfo
	//
	// [6] = [WRITE] payFrom
	//
	// [7] = [WRITE] payTo
	//
	// [8] = [] notary
	//
	// [9] = [WRITE] metadata
	//
	// [10] = [WRITE, SIGNER] mint
	//
	// [11] = [WRITE] tokenAta
	//
	// [12] = [WRITE] masterEdition
	//
	// [13] = [WRITE] walletLimitInfo
	//
	// [14] = [WRITE] orderInfo
	//
	// [15] = [] slotHashes
	//
	// [16] = [] tokenMetadataProgram
	//
	// [17] = [] tokenProgram
	//
	// [18] = [] systemProgram
	//
	// [19] = [] associatedTokenProgram
	//
	// [20] = [] rent
	//
	// [21] = [WRITE] ocpMintState
	//
	// [22] = [] ocpPolicy
	//
	// [23] = [] ocpFreezeAuthority
	//
	// [24] = [] ocpProgram
	//
	// [25] = [] cmtProgram
	//
	// [26] = [] instructions
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintNftOcpInstructionBuilder creates a new `MintNftOcp` instruction builder.
func NewMintNftOcpInstructionBuilder() *MintNftOcp {
	nd := &MintNftOcp{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 27),
	}
	return nd
}

// SetWalletLimitBump sets the "walletLimitBump" parameter.
func (inst *MintNftOcp) SetWalletLimitBump(walletLimitBump uint8) *MintNftOcp {
	inst.WalletLimitBump = &walletLimitBump
	return inst
}

// SetInOrder sets the "inOrder" parameter.
func (inst *MintNftOcp) SetInOrder(inOrder bool) *MintNftOcp {
	inst.InOrder = &inOrder
	return inst
}

// SetUserLimit sets the "userLimit" parameter.
func (inst *MintNftOcp) SetUserLimit(userLimit uint8) *MintNftOcp {
	inst.UserLimit = &userLimit
	return inst
}

// SetCurrTime sets the "currTime" parameter.
func (inst *MintNftOcp) SetCurrTime(currTime int64) *MintNftOcp {
	inst.CurrTime = &currTime
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *MintNftOcp) SetConfigAccount(config ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *MintNftOcp) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *MintNftOcp) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *MintNftOcp) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintReceiverAccount sets the "mintReceiver" account.
func (inst *MintNftOcp) SetMintReceiverAccount(mintReceiver ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintReceiver)
	return inst
}

// GetMintReceiverAccount gets the "mintReceiver" account.
func (inst *MintNftOcp) GetMintReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCandyMachineWalletAuthorityAccount sets the "candyMachineWalletAuthority" account.
func (inst *MintNftOcp) SetCandyMachineWalletAuthorityAccount(candyMachineWalletAuthority ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(candyMachineWalletAuthority).WRITE()
	return inst
}

// GetCandyMachineWalletAuthorityAccount gets the "candyMachineWalletAuthority" account.
func (inst *MintNftOcp) GetCandyMachineWalletAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *MintNftOcp) SetPayerAccount(payer ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MintNftOcp) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLaunchStagesInfoAccount sets the "launchStagesInfo" account.
func (inst *MintNftOcp) SetLaunchStagesInfoAccount(launchStagesInfo ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(launchStagesInfo).WRITE()
	return inst
}

// GetLaunchStagesInfoAccount gets the "launchStagesInfo" account.
func (inst *MintNftOcp) GetLaunchStagesInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayFromAccount sets the "payFrom" account.
func (inst *MintNftOcp) SetPayFromAccount(payFrom ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payFrom).WRITE()
	return inst
}

// GetPayFromAccount gets the "payFrom" account.
func (inst *MintNftOcp) GetPayFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPayToAccount sets the "payTo" account.
func (inst *MintNftOcp) SetPayToAccount(payTo ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(payTo).WRITE()
	return inst
}

// GetPayToAccount gets the "payTo" account.
func (inst *MintNftOcp) GetPayToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetNotaryAccount sets the "notary" account.
func (inst *MintNftOcp) SetNotaryAccount(notary ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(notary)
	return inst
}

// GetNotaryAccount gets the "notary" account.
func (inst *MintNftOcp) GetNotaryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *MintNftOcp) SetMetadataAccount(metadata ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *MintNftOcp) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMintAccount sets the "mint" account.
func (inst *MintNftOcp) SetMintAccount(mint ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(mint).WRITE().SIGNER()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *MintNftOcp) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenAtaAccount sets the "tokenAta" account.
func (inst *MintNftOcp) SetTokenAtaAccount(tokenAta ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenAta).WRITE()
	return inst
}

// GetTokenAtaAccount gets the "tokenAta" account.
func (inst *MintNftOcp) GetTokenAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetMasterEditionAccount sets the "masterEdition" account.
func (inst *MintNftOcp) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
func (inst *MintNftOcp) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetWalletLimitInfoAccount sets the "walletLimitInfo" account.
func (inst *MintNftOcp) SetWalletLimitInfoAccount(walletLimitInfo ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(walletLimitInfo).WRITE()
	return inst
}

// GetWalletLimitInfoAccount gets the "walletLimitInfo" account.
func (inst *MintNftOcp) GetWalletLimitInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetOrderInfoAccount sets the "orderInfo" account.
func (inst *MintNftOcp) SetOrderInfoAccount(orderInfo ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(orderInfo).WRITE()
	return inst
}

// GetOrderInfoAccount gets the "orderInfo" account.
func (inst *MintNftOcp) GetOrderInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSlotHashesAccount sets the "slotHashes" account.
func (inst *MintNftOcp) SetSlotHashesAccount(slotHashes ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(slotHashes)
	return inst
}

// GetSlotHashesAccount gets the "slotHashes" account.
func (inst *MintNftOcp) GetSlotHashesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintNftOcp) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintNftOcp) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintNftOcp) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintNftOcp) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintNftOcp) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintNftOcp) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *MintNftOcp) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *MintNftOcp) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetRentAccount sets the "rent" account.
func (inst *MintNftOcp) SetRentAccount(rent ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MintNftOcp) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetOcpMintStateAccount sets the "ocpMintState" account.
func (inst *MintNftOcp) SetOcpMintStateAccount(ocpMintState ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(ocpMintState).WRITE()
	return inst
}

// GetOcpMintStateAccount gets the "ocpMintState" account.
func (inst *MintNftOcp) GetOcpMintStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetOcpPolicyAccount sets the "ocpPolicy" account.
func (inst *MintNftOcp) SetOcpPolicyAccount(ocpPolicy ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(ocpPolicy)
	return inst
}

// GetOcpPolicyAccount gets the "ocpPolicy" account.
func (inst *MintNftOcp) GetOcpPolicyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetOcpFreezeAuthorityAccount sets the "ocpFreezeAuthority" account.
func (inst *MintNftOcp) SetOcpFreezeAuthorityAccount(ocpFreezeAuthority ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(ocpFreezeAuthority)
	return inst
}

// GetOcpFreezeAuthorityAccount gets the "ocpFreezeAuthority" account.
func (inst *MintNftOcp) GetOcpFreezeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetOcpProgramAccount sets the "ocpProgram" account.
func (inst *MintNftOcp) SetOcpProgramAccount(ocpProgram ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(ocpProgram)
	return inst
}

// GetOcpProgramAccount gets the "ocpProgram" account.
func (inst *MintNftOcp) GetOcpProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetCmtProgramAccount sets the "cmtProgram" account.
func (inst *MintNftOcp) SetCmtProgramAccount(cmtProgram ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(cmtProgram)
	return inst
}

// GetCmtProgramAccount gets the "cmtProgram" account.
func (inst *MintNftOcp) GetCmtProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

// SetInstructionsAccount sets the "instructions" account.
func (inst *MintNftOcp) SetInstructionsAccount(instructions ag_solanago.PublicKey) *MintNftOcp {
	inst.AccountMetaSlice[26] = ag_solanago.Meta(instructions)
	return inst
}

// GetInstructionsAccount gets the "instructions" account.
func (inst *MintNftOcp) GetInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(26)
}

func (inst MintNftOcp) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintNftOcp,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintNftOcp) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintNftOcp) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.WalletLimitBump == nil {
			return errors.New("WalletLimitBump parameter is not set")
		}
		if inst.InOrder == nil {
			return errors.New("InOrder parameter is not set")
		}
		if inst.CurrTime == nil {
			return errors.New("CurrTime parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintReceiver is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CandyMachineWalletAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LaunchStagesInfo is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PayFrom is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PayTo is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Notary is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenAta is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.WalletLimitInfo is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.OrderInfo is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SlotHashes is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.OcpMintState is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.OcpPolicy is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.OcpFreezeAuthority is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.OcpProgram is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.CmtProgram is not set")
		}
		if inst.AccountMetaSlice[26] == nil {
			return errors.New("accounts.Instructions is not set")
		}
	}
	return nil
}

func (inst *MintNftOcp) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintNftOcp")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("WalletLimitBump", *inst.WalletLimitBump))
						paramsBranch.Child(ag_format.Param("        InOrder", *inst.InOrder))
						paramsBranch.Child(ag_format.Param("      UserLimit (OPT)", inst.UserLimit))
						paramsBranch.Child(ag_format.Param("       CurrTime", *inst.CurrTime))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=27]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               candyMachine", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               mintReceiver", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("candyMachineWalletAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                      payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           launchStagesInfo", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                    payFrom", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                      payTo", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                     notary", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                   metadata", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                       mint", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                   tokenAta", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("              masterEdition", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("            walletLimitInfo", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                  orderInfo", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                 slotHashes", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("       tokenMetadataProgram", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("              systemProgram", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("     associatedTokenProgram", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("                       rent", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("               ocpMintState", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("                  ocpPolicy", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("         ocpFreezeAuthority", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("                 ocpProgram", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("                 cmtProgram", inst.AccountMetaSlice.Get(25)))
						accountsBranch.Child(ag_format.Meta("               instructions", inst.AccountMetaSlice.Get(26)))
					})
				})
		})
}

func (obj MintNftOcp) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WalletLimitBump` param:
	err = encoder.Encode(obj.WalletLimitBump)
	if err != nil {
		return err
	}
	// Serialize `InOrder` param:
	err = encoder.Encode(obj.InOrder)
	if err != nil {
		return err
	}
	// Serialize `UserLimit` param (optional):
	{
		if obj.UserLimit == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UserLimit)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CurrTime` param:
	err = encoder.Encode(obj.CurrTime)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintNftOcp) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WalletLimitBump`:
	err = decoder.Decode(&obj.WalletLimitBump)
	if err != nil {
		return err
	}
	// Deserialize `InOrder`:
	err = decoder.Decode(&obj.InOrder)
	if err != nil {
		return err
	}
	// Deserialize `UserLimit` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UserLimit)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CurrTime`:
	err = decoder.Decode(&obj.CurrTime)
	if err != nil {
		return err
	}
	return nil
}

// NewMintNftOcpInstruction declares a new MintNftOcp instruction with the provided parameters and accounts.
func NewMintNftOcpInstruction(
	// Parameters:
	walletLimitBump uint8,
	inOrder bool,
	userLimit uint8,
	currTime int64,
	// Accounts:
	config ag_solanago.PublicKey,
	candyMachine ag_solanago.PublicKey,
	mintReceiver ag_solanago.PublicKey,
	candyMachineWalletAuthority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	launchStagesInfo ag_solanago.PublicKey,
	payFrom ag_solanago.PublicKey,
	payTo ag_solanago.PublicKey,
	notary ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenAta ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	walletLimitInfo ag_solanago.PublicKey,
	orderInfo ag_solanago.PublicKey,
	slotHashes ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	ocpMintState ag_solanago.PublicKey,
	ocpPolicy ag_solanago.PublicKey,
	ocpFreezeAuthority ag_solanago.PublicKey,
	ocpProgram ag_solanago.PublicKey,
	cmtProgram ag_solanago.PublicKey,
	instructions ag_solanago.PublicKey) *MintNftOcp {
	return NewMintNftOcpInstructionBuilder().
		SetWalletLimitBump(walletLimitBump).
		SetInOrder(inOrder).
		SetUserLimit(userLimit).
		SetCurrTime(currTime).
		SetConfigAccount(config).
		SetCandyMachineAccount(candyMachine).
		SetMintReceiverAccount(mintReceiver).
		SetCandyMachineWalletAuthorityAccount(candyMachineWalletAuthority).
		SetPayerAccount(payer).
		SetLaunchStagesInfoAccount(launchStagesInfo).
		SetPayFromAccount(payFrom).
		SetPayToAccount(payTo).
		SetNotaryAccount(notary).
		SetMetadataAccount(metadata).
		SetMintAccount(mint).
		SetTokenAtaAccount(tokenAta).
		SetMasterEditionAccount(masterEdition).
		SetWalletLimitInfoAccount(walletLimitInfo).
		SetOrderInfoAccount(orderInfo).
		SetSlotHashesAccount(slotHashes).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetRentAccount(rent).
		SetOcpMintStateAccount(ocpMintState).
		SetOcpPolicyAccount(ocpPolicy).
		SetOcpFreezeAuthorityAccount(ocpFreezeAuthority).
		SetOcpProgramAccount(ocpProgram).
		SetCmtProgramAccount(cmtProgram).
		SetInstructionsAccount(instructions)
}
