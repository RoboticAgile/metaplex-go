// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package me_launchpad

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/RoboticAgile/solana-go"
	ag_format "github.com/RoboticAgile/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Freeze is the `freeze` instruction.
type Freeze struct {

	// [0] = [SIGNER] payer
	//
	// [1] = [WRITE] freezeState
	//
	// [2] = [] candyMachine
	//
	// [3] = [] assetMint
	//
	// [4] = [WRITE] assetToken
	//
	// [5] = [] assetMasterEdition
	//
	// [6] = [] tokenMetadataProgram
	//
	// [7] = [] systemProgram
	//
	// [8] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFreezeInstructionBuilder creates a new `Freeze` instruction builder.
func NewFreezeInstructionBuilder() *Freeze {
	nd := &Freeze{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *Freeze) SetPayerAccount(payer ag_solanago.PublicKey) *Freeze {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *Freeze) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFreezeStateAccount sets the "freezeState" account.
func (inst *Freeze) SetFreezeStateAccount(freezeState ag_solanago.PublicKey) *Freeze {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(freezeState).WRITE()
	return inst
}

// GetFreezeStateAccount gets the "freezeState" account.
func (inst *Freeze) GetFreezeStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *Freeze) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *Freeze {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(candyMachine)
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *Freeze) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAssetMintAccount sets the "assetMint" account.
func (inst *Freeze) SetAssetMintAccount(assetMint ag_solanago.PublicKey) *Freeze {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(assetMint)
	return inst
}

// GetAssetMintAccount gets the "assetMint" account.
func (inst *Freeze) GetAssetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAssetTokenAccount sets the "assetToken" account.
func (inst *Freeze) SetAssetTokenAccount(assetToken ag_solanago.PublicKey) *Freeze {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(assetToken).WRITE()
	return inst
}

// GetAssetTokenAccount gets the "assetToken" account.
func (inst *Freeze) GetAssetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAssetMasterEditionAccount sets the "assetMasterEdition" account.
func (inst *Freeze) SetAssetMasterEditionAccount(assetMasterEdition ag_solanago.PublicKey) *Freeze {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(assetMasterEdition)
	return inst
}

// GetAssetMasterEditionAccount gets the "assetMasterEdition" account.
func (inst *Freeze) GetAssetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *Freeze) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *Freeze {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *Freeze) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Freeze) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Freeze {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Freeze) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Freeze) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Freeze {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Freeze) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst Freeze) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Freeze,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Freeze) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Freeze) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FreezeState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AssetMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AssetToken is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AssetMasterEdition is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Freeze) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Freeze")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         freezeState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        candyMachine", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           assetMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          assetToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  assetMasterEdition", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("tokenMetadataProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj Freeze) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Freeze) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewFreezeInstruction declares a new Freeze instruction with the provided parameters and accounts.
func NewFreezeInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	freezeState ag_solanago.PublicKey,
	candyMachine ag_solanago.PublicKey,
	assetMint ag_solanago.PublicKey,
	assetToken ag_solanago.PublicKey,
	assetMasterEdition ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Freeze {
	return NewFreezeInstructionBuilder().
		SetPayerAccount(payer).
		SetFreezeStateAccount(freezeState).
		SetCandyMachineAccount(candyMachine).
		SetAssetMintAccount(assetMint).
		SetAssetTokenAccount(assetToken).
		SetAssetMasterEditionAccount(assetMasterEdition).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram)
}
